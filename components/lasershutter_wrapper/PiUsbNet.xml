<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PiUsbNet</name>
    </assembly>
    <members>
        <member name="T:PiUsbNet.FlipperState">
            <summary>
            The state of the Flipper device.
            </summary>
        </member>
        <member name="F:PiUsbNet.FlipperState.Retracted">
            <summary>
            The Flipper is retracted.
            </summary>
        </member>
        <member name="F:PiUsbNet.FlipperState.Extended">
            <summary>
            The Flipper is extended.
            </summary>
        </member>
        <member name="T:PiUsbNet.FlipperStateChangedEventArgs">
            <summary>
            Provides data for the Flipper StateChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.FlipperStateChangedEventArgs.State">
            <summary>
            Gets a value that indicates the state of the flipper.
            </summary>
        </member>
        <member name="M:PiUsbNet.FlipperStateChangedEventArgs.#ctor(PiUsbNet.FlipperState)">
            <summary>
            Initializes a new instance of the FlipperStateChangedEventArgs class using
            the specified new state.
            </summary>
            <param name="state">The flipper state.</param>
        </member>
        <member name="T:PiUsbNet.Flipper">
            <summary>
            Provides an interface to a Flipper device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Flipper.StateChanged">
            <summary>
            Occurs when the state of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Flipper.OnStateChanged(PiUsbNet.FlipperStateChangedEventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new state.</param>
        </member>
        <member name="M:PiUsbNet.Flipper.#ctor">
            <summary>
            Initializes a new instance of the Flipper class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Flipper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Flipper class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Flipper.Connect">
            <summary>
            Attempts to connect to the Flipper device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Flipper.State">
            <summary>
            Gets or sets the state of the flipper.
            </summary>
        </member>
        <member name="P:PiUsbNet.Flipper.PreviousState">
            <summary>
            Gets or sets the state from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Flipper.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Flipper.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Flipper devices.
            </summary>
            <param name="SerialNumberList"> A list of device serial numbers.</param>
        </member>
        <member name="T:PiUsbNet.GradientWheelStatusChangedEventArgs">
            <summary>
            Provides data for the GradientWheel StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheelStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the gradient wheel is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheelStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GradientWheelStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the GradientWheel is moving.</param>
        </member>
        <member name="T:PiUsbNet.GradientWheelPositionChangedEventArgs">
            <summary>
            Provides data for the GradientWheel PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheelPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheelPositionChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GradientWheelPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.GradientWheel">
            <summary>
            Provides an interface to a GradientWheel device.
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheel.MinPosition">
            <summary>
            Gets the minimum position for the device.
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheel.MaxPosition">
            <summary>
            Gets the maximum position for the device.
            </summary>
        </member>
        <member name="E:PiUsbNet.GradientWheel.PositionChanged">
            <summary>
            Occurs when the position of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.GradientWheel.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheel.OnPositionChanged(PiUsbNet.GradientWheelPositionChangedEventArgs)">
            <summary>
            Raises the GradientWheelChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.GradientWheel.OnStatusChanged(PiUsbNet.GradientWheelStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.GradientWheel.#ctor">
            <summary>
            Initializes a new instance of the GradientWheel class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GradientWheel class and opens the specified serial
            number.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.GradientWheel.Connect">
            <summary>
            Attempts to connect to the GradientWheel device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.GradientWheel.IsMoving">
            <summary>
            Gets a value that indicates whether the gradient wheel is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheel.Position">
            <summary>
            Gets the position of the Gradient Wheel.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheel.MoveTo(System.Int32)">
            <summary>
            Initiates a move to a new position.
            </summary>
            <remarks>
            <para>
            The destination must between 1 and 511.
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
        </member>
        <member name="M:PiUsbNet.GradientWheel.Halt">
            <summary>
            Stops all motion.
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheel.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.GradientWheel.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheel.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.GradientWheel.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Gradient Wheel devices.
            </summary>
            <param name="SerialNumberList"> A list of device serial numbers.</param>
            <remarks>
            <para>
            Filter Wheel, Gradient Wheel, and Rotator devices share the same ProductID, and
            are therefore not distinguishable. This method will return all Filter Wheel,
            Gradient Wheel, and Rotator devices.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.HidDeviceChangedEventArgs">
            <summary>
            Provides data for the HidDeviceAdded event and HidDeviceRemoved event.
            These events are raised by the HidDeviceChangeWindow when a HID device
            is added or removed from the system.
            </summary>
        </member>
        <member name="P:PiUsbNet.HidDeviceChangedEventArgs.Name">
            <summary>
            Gets or sets the dbcc_name field that is passed with the windows
            WM_DEVICECHANGE message.
            </summary>
            <remarks>
            This is device interface name for the Hid device.
            </remarks>
        </member>
        <member name="M:PiUsbNet.HidDeviceChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HidDeviceChangedEventArgs class using
            the specified name.
            </summary>
            <param name="name">The dbcc_name string received with the DeviceChange message.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceChangeWindow.Log(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a line to the log file.
            </summary>
            <param name="logType">The log level for this message.</param>
            <param name="s">The string to write to the log file.</param>
        </member>
        <member name="E:PiUsbNet.HidDeviceChangeWindow.HidDeviceAdded">
            <summary>
            Occurs when a Hid device is added to the system
            </summary>
        </member>
        <member name="E:PiUsbNet.HidDeviceChangeWindow.HidDeviceRemoved">
            <summary>
            Occurs when a Hid device is removed from the system
            </summary>
        </member>
        <member name="M:PiUsbNet.HidDeviceChangeWindow.OnHidDeviceAdded(PiUsbNet.HidDeviceChangedEventArgs)">
            <summary>
            Raises the HidDeviceAdded event.
            </summary>
            <param name="e">An EventArgs that contains the dbcc_name of the device added.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceChangeWindow.OnHidDeviceRemoved(PiUsbNet.HidDeviceChangedEventArgs)">
            <summary>
            Raises the HidDeviceRemoved event.
            </summary>
            <param name="e">An EventArgs that contains the dbcc_name of the device removed.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceChangeWindow.RegisterUsbDeviceNotification(System.IntPtr)">
            <summary>
            Registers a window to receive notifications when USB devices are plugged or unplugged.
            </summary>
            <param name="windowHandle">Handle to the window receiving notifications.</param>
        </member>
        <member name="T:PiUsbNet.DeviceAddedRemovedEventArgs">
            <summary>
            Provides data for the DeviceAdded and DeviceRemoved.
            These events are raised by the HidDeviceManager when a monitored device
            is added or removed from the system.
            </summary>
            <remarks>
            A monitored device is one that matches the Vendor ID and Product ID lists of
            the HidDeviceManager.
            </remarks>
        </member>
        <member name="P:PiUsbNet.DeviceAddedRemovedEventArgs.VendorId">
            <summary>
            Gets or sets the Vendor ID of the device added or removed.
            </summary>
        </member>
        <member name="P:PiUsbNet.DeviceAddedRemovedEventArgs.ProductId">
            <summary>
            Gets or sets the Product ID of the device added or removed.
            </summary>
        </member>
        <member name="P:PiUsbNet.DeviceAddedRemovedEventArgs.VersionNumber">
            <summary>
            Gets or sets the Version Number of the device added or removed..
            </summary>
        </member>
        <member name="M:PiUsbNet.DeviceAddedRemovedEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PicardDeviceChangedEventArgs class using
            the specified Vendor ID, Product ID, and Version Number.
            </summary>
            <param name="vendorId">The vendor ID of the device added or removed.</param>
            <param name="productId">The product ID of the device added or removed.</param>
            <param name="versionNumber">The version number of the device added or removed.</param>
        </member>
        <member name="M:PiUsbNet.DeviceAddedRemovedEventArgs.#ctor(PiUsbNet.HidDeviceProperties)">
            <summary>
            Initializes a new instance of the PicardDeviceChangedEventArgs class using
            the specified Vendor ID, Product ID, and Version Number.
            </summary>
            <param name="props">A HidDeviceProperties object that contains the Vendor ID,
            Product ID, and Version Number of the device added or removed.</param>
        </member>
        <member name="T:PiUsbNet.HidDeviceManager">
            <summary>
            Provides an interface to manage a collection of HID devices.
            </summary>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.Log(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a line to the log file.
            </summary>
            <param name="logType">The log level for this message.</param>
            <param name="s">The string to write to the log file.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.#ctor">
            <summary>
            Initializes a new instance of the HidDeviceManager class, with the VendorID and
            PiProductId lists set to empty.
            </summary>
            <remarks>
            All HID devices will be managed.
            </remarks>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the HidDeviceManager class with the specified
            VendorID.
            </summary>
            <remarks>
            Only HID devices with a matching VendorID (but any ProductID) will be managed.
            </remarks>
            <param name="vendorId">The VendorID of the devices to be managed.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the HidDeviceManager class with the specified
            VendorID and ProductID.
            </summary>
            <remarks>
            Only HID devices with a matching VendorID and ProductID will be managed.
            </remarks>
            <param name="vendorId">The VendorID of the devices to be managed.</param>
            <param name="productId">The ProductID of the devices to be managed.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the HidDeviceManager class with the specified
            lists of VendorID and ProductID.
            </summary>
            <remarks>
            Only HID devices that match one of the VendorIDs and one of the ProductIDs
            will be managed.
            </remarks>
            <param name="vendorId">A list of VendorIDs of devices to be managed.</param>
            <param name="productId">A list of ProductIDs of the devices to be managed.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.Dispose">
            <summary>
            Disposes of resource used by the HidDeviceManager.
            </summary>
            <remarks>
            This method releases unsubscribes from the HidDeviceChangeWindow event handlers
            </remarks>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.Dispose(System.Boolean)">
            <summary>
            Disposes of resource used by the HidDeviceManager.
            </summary>
            <remarks>
            This method releases unsubscribes from the HidDeviceChangeWindow event handlers
            </remarks>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="P:PiUsbNet.HidDeviceManager.VendorId">
            <summary>
            The VendorIDs of the devices to be managed.
            </summary>
            <remarks>
            <para>
            If VendorId is set to a non-empty list, only devices with a Vendor ID that
            matches one of the items in the list will be managed.
            If the list is empty, all devices with any VendorID will be managed.
            </para>
            <para>
            The VendorId property can only be set during construction. It cannot be changed
            once an instance has been created.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.HidDeviceManager.ProductId">
            <summary>
            The ProductID of the devices to be managed.
            </summary>
            <remarks>
            <para>
            If PiProductId is set to a non-empty list, only devices with a Product ID that
            matches one of the items in the list will be managed.
            If the list is empty, all devices with any Product ID will be managed.
            </para>
            <para>
            The PiProductId property can only be set during construction. It cannot be changed
            once an instance has been created.
            </para>
            </remarks>
        </member>
        <member name="E:PiUsbNet.HidDeviceManager.DeviceAdded">
            <summary>
            Occurs when a monitored device is added to the system
            </summary>
        </member>
        <member name="E:PiUsbNet.HidDeviceManager.DeviceRemoved">
            <summary>
            Occurs when a monitored device is removed from the system
            </summary>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.OnDeviceAdded(PiUsbNet.DeviceAddedRemovedEventArgs)">
            <summary>
            Raises the DeviceAdded event.
            </summary>
            <param name="e">An EventArgs that contains the Vendor ID, Product ID,
            and Version Number of the device added.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.OnDeviceRemoved(PiUsbNet.DeviceAddedRemovedEventArgs)">
            <summary>
            Raises the DeviceRemoved event.
            </summary>
            <param name="e">An EventArgs that contains the Vendor ID, Product ID,
            and Version Number of the device removed.</param>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.FindDevice(PiUsbNet.HidDeviceProperties)">
            <summary>
            Search HidDevices for a matching device. Must match the VendorID, ProductID, and
            Version number.
            </summary>
            <param name="hidDevice">The HidDeviceProperties of the device to search for.</param>
            <returns>The index of the matching device, or -1 if not found.</returns>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.FindDeviceName(System.String)">
            <summary>
            Search HidDevices for the device interface path.
            </summary>
            <param name="deviceInterfacePath">The device interface path string to search for</param>
            <returns>The index of the matching device, or -1 if not found.</returns>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.IsConnected(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether the specified device is currently connected.
            </summary>
            <param name="vendorId">The vendor ID to look for</param>
            <param name="productId">The product ID to look for</param>
            <param name="versionNumber">The version number to look for</param>
            <returns>True if the device is connect, false otherwise.</returns>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.IsConnected(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a value indicating whether all of the specified devices are currently connected.
            </summary>
            <param name="vendorId">The vendor ID to look for</param>
            <param name="productIdArray">The product IDs to look for</param>
            <param name="versionNumberArray">The version numbers to look for</param>
            <returns>True if the device is connect, false otherwise.</returns>
        </member>
        <member name="M:PiUsbNet.HidDeviceManager.EnumerateHidDevices">
            <summary>
            Updates the list of devices to the set of currently connected devices that
            match the VendorID and ProductID properties.
            </summary>
            <remarks>
            This method is called automatically during construction and is not normally
            called again.
            It sets the list of managed devices to be those devices that are currently connected
            and match the VendorID and ProductID.
            If you call this method after construction, you will discard any memory of devices
            which were previously connected by have been disconnected by the user.
            </remarks>
        </member>
        <member name="T:PiUsbNet.HidDeviceProperties">
            <summary>
            Provides an interface to the properties of a HID device.
            </summary>
        </member>
        <member name="P:PiUsbNet.HidDeviceProperties.VendorId">
            <summary>
            Gets or sets the HID device Vendor ID.
            </summary>
        </member>
        <member name="P:PiUsbNet.HidDeviceProperties.ProductId">
            <summary>
            Gets or sets the HID device Product ID.
            </summary>
        </member>
        <member name="P:PiUsbNet.HidDeviceProperties.VersionNumber">
            <summary>
            Gets or sets the manufacturer's revision number for a HIDClass device.
            </summary>
            <remarks>
            Some products use this for the product serial number.
            </remarks>
        </member>
        <member name="P:PiUsbNet.HidDeviceProperties.DeviceInterfacePath">
            <summary>
            Gets or sets the HID device interface path.
            </summary>
            <remarks>
            <para>
            This path uniquely identifies the device on the current system.
            It is the path obtained from SetupDiGetDeviceInterfaceDetail.
            It can be passed to CreateFile to open the device.
            </para>
            <para>
            For example, the device interface path will be similar to:
            <code language="none">
            <![CDATA[
            \\?\HID#VID_0461&PID_0020#7&91d4df3&0&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}
            ]]>
            </code>
            The VendorID (<c>0461</c>) and Product ID (<c>0020</c>)
            will change with the type of device.
            </para>
            <para>
            The GUID <c>{4d1e55b2-f16f-11cf-88cb-001111000030}</c> is the
            device interface class GUID defined for HID collections, know as GUID_DEVINTERFACE_HID.
            </para>
            <para>
            The portion between the PID and the GUID uniquely identifies the device on the
            current system.
            It is an opaque value defined by windows.
            It changes if you plug the device into a different USB port.
            It can change on reboot.
            </para>
            <para>
            Unfortunately windows returns this identifier sometimes with different case (
            upper case vs lower case). For example, the identifier might be returned as
            <![CDATA[
            "\\?\HID#VID_0461&PID_0020#...",
            ]]>
            and sometimes with lower case "vid_
            <![CDATA[
            "\\?\hid#vid_0461&pid_0020#...".
            ]]>
            You should do case-insensitive comparisons.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.HidDeviceProperties.Connected">
            <summary>
            Gets or sets a value that indicates whether the device is currently
            connected (attached).
            </summary>
        </member>
        <member name="T:PiUsbNet.Native.SPDRP">
            <summary>
            Device registry property codes
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_DEVICEDESC">
            <summary>
            DeviceDesc (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_HARDWAREID">
            <summary>
            HardwareID (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_COMPATIBLEIDS">
            <summary>
            CompatibleIDs (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UNUSED0">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_SERVICE">
            <summary>
            Service (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UNUSED1">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UNUSED2">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_CLASS">
            <summary>
            Class (R--tied to ClassGUID)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_CLASSGUID">
            <summary>
            ClassGUID (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_DRIVER">
            <summary>
            Driver (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_CONFIGFLAGS">
            <summary>
            ConfigFlags (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_MFG">
            <summary>
            Mfg (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_FRIENDLYNAME">
            <summary>
            FriendlyName (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_LOCATION_INFORMATION">
            <summary>
            LocationInformation (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_PHYSICAL_DEVICE_OBJECT_NAME">
            <summary>
            PhysicalDeviceObjectName (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_CAPABILITIES">
            <summary>
            Capabilities (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UI_NUMBER">
            <summary>
            UiNumber (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UPPERFILTERS">
            <summary>
            UpperFilters (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_LOWERFILTERS">
            <summary>
            LowerFilters (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_BUSTYPEGUID">
            <summary>
            BusTypeGUID (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_LEGACYBUSTYPE">
            <summary>
            LegacyBusType (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_BUSNUMBER">
            <summary>
            BusNumber (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_ENUMERATOR_NAME">
            <summary>
            Enumerator Name (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_SECURITY">
            <summary>
            Security (R/W, binary form)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_SECURITY_SDS">
            <summary>
            Security (W, SDS form)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_DEVTYPE">
            <summary>
            Device Type (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_EXCLUSIVE">
            <summary>
            Device is exclusive-access (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_CHARACTERISTICS">
            <summary>
            Device Characteristics (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_ADDRESS">
            <summary>
            Device Address (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_UI_NUMBER_DESC_FORMAT">
            <summary>
            UiNumberDescFormat (R/W)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_DEVICE_POWER_DATA">
            <summary>
            Device Power Data (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_REMOVAL_POLICY">
            <summary>
            Removal Policy (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_REMOVAL_POLICY_HW_DEFAULT">
            <summary>
            Hardware Removal Policy (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_REMOVAL_POLICY_OVERRIDE">
            <summary>
            Removal Policy Override (RW)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_INSTALL_STATE">
            <summary>
            Device Install State (R)
            </summary>
        </member>
        <member name="F:PiUsbNet.Native.SPDRP.SPDRP_LOCATION_PATHS">
            <summary>
            Device Location Paths (R)
            </summary>
        </member>
        <member name="M:PiUsbNet.Native.SetupDiGetDeviceRegistryProperty(System.IntPtr,PiUsbNet.Native.SP_DEVINFO_DATA@,PiUsbNet.Native.SPDRP,System.UInt32@,System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            The SetupDiGetDeviceRegistryProperty function retrieves the specified device property.
            This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.
            </summary>
            <param Name="DeviceInfoSet">Handle to the device information set that contains the interface and its underlying device.</param>
            <param Name="DeviceInfoData">Pointer to an SP_DEVINFO_DATA structure that defines the device instance.</param>
            <param Name="Property">Device property to be retrieved. SEE MSDN</param>
            <param Name="PropertyRegDataType">Pointer to a variable that receives the registry data Type. This parameter can be NULL.</param>
            <param Name="PropertyBuffer">Pointer to a buffer that receives the requested device property.</param>
            <param Name="PropertyBufferSize">Size of the buffer, in bytes.</param>
            <param Name="RequiredSize">Pointer to a variable that receives the required buffer size, in bytes. This parameter can be NULL.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="T:PiUsbNet.PiProductId">
            <summary>
            The product ID returned by FindDevices to identify the type of device
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.All">
            <summary>
            All Picard Industries Devices
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Relay">
            <summary>
            Relay
            </summary>
            <remarks>The Relay and Valve products share the same Product ID</remarks>
        </member>
        <member name="F:PiUsbNet.PiProductId.Valve">
            <summary>
            Valve
            </summary>
            <remarks>The Relay and Valve products share the same Product ID</remarks>
        </member>
        <member name="F:PiUsbNet.PiProductId.Laser">
            <summary>
            Laser
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Motor">
            <summary>
            Motor
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Twister">
            <summary>
            Twister
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Shutter">
            <summary>
            Shutter
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Flipper">
            <summary>
            Flipper
            </summary>
        </member>
        <member name="F:PiUsbNet.PiProductId.Filter">
            <summary>
            Filter
            </summary>
            <remarks>The Filter Wheel, Gradient Wheel, and Rotator products share the same Product ID</remarks>
        </member>
        <member name="F:PiUsbNet.PiProductId.Gradient">
            <summary>
            Gradient Wheel
            </summary>
            <remarks>The Filter Wheel, Gradient Wheel, and Rotator products share the same Product ID</remarks>
        </member>
        <member name="F:PiUsbNet.PiProductId.Rotator">
            <summary>
            Rotator
            </summary>
            <remarks>The Filter Wheel, Gradient Wheel, and Rotator products share the same Product ID</remarks>
        </member>
        <member name="T:PiUsbNet.UsbDevice">
            <summary>
            Base class for PicardIndustries USB devices
            This is an abstract class that cannot be instantiated.
            </summary>
        </member>
        <member name="F:PiUsbNet.UsbDevice.LogSource">
            <summary>
            The LogSource to use for logging.
            </summary>
        </member>
        <member name="F:PiUsbNet.UsbDevice.MyLock">
            <summary>
            Lock object to provide thread safety.
            </summary>
        </member>
        <member name="F:PiUsbNet.UsbDevice.PicardVendorId">
            <summary>
            The HID Vendor ID for all Picard products.
            </summary>
        </member>
        <member name="P:PiUsbNet.UsbDevice.DeviceManager">
            <summary>
            The HidDeviceManager object used to manage all Picard HID devices.
            </summary>
        </member>
        <member name="P:PiUsbNet.UsbDevice.DeviceHandle">
            <summary>
            The device handle returned from the native dll (PiUsb.dll)
            </summary>
        </member>
        <member name="P:PiUsbNet.UsbDevice.ProductIdList">
            <summary>
            Gets or sets the HID product IDs of the device(s).
            </summary>
            <value>
            A list of product ID numbers
            </value>
            <remarks>
            <para>
            This should be set in the constructor of the derived class.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.UsbDevice.SerialNumberList">
            <summary>
            Gets the serial numbers of the device(s).
            </summary>
            <value>
            A list of serial numbers
            </value>
        </member>
        <member name="P:PiUsbNet.UsbDevice.SerialNumber">
            <summary>
            Gets the serial number of the device.
            </summary>
        </member>
        <member name="P:PiUsbNet.UsbDevice.PollingInterval">
            <summary>
            Gets or sets the polling interval, in milliseconds, of the background polling
            thread.
            </summary>
        </member>
        <member name="E:PiUsbNet.UsbDevice.Connected">
            <summary>
            Occurs when the device is connected.
            </summary>
            <remarks>
            A connected event occurs when the object is open and the device is plugged
            in (attached). If the device is already plugged in when you call
            <see cref="M:PiUsbNet.UsbDevice.Open(System.Int32)" />
            or
            <see cref="M:PiUsbNet.UsbDevice.Open(System.Collections.Generic.List{System.Int32})" />
            the Connected event will occur after the object is opened (just before the
            Open method returns).
            </remarks>
        </member>
        <member name="E:PiUsbNet.UsbDevice.Disconnected">
            <summary>
            Occurs when the device is disconnected.
            </summary>
            <remarks>
            A disconnected event occurs when the object is open and the device is unplugged
            (removed). It also occurs when you close the object (before the Close method
            returns).
            </remarks>
        </member>
        <member name="M:PiUsbNet.UsbDevice.OnConnected(System.EventArgs)">
            <summary>
            Raises the Connected event.
            </summary>
            <param name="e">An empty EventArgs</param>
        </member>
        <member name="M:PiUsbNet.UsbDevice.OnDisconnected(System.EventArgs)">
            <summary>
            Raises the Disconnected event.
            </summary>
            <param name="e">An empty EventArgs.</param>
        </member>
        <member name="P:PiUsbNet.UsbDevice.IsConnected">
            <summary>
            Gets a value that indicates whether the device is connected.
            </summary>
            <remarks>
            Returns true if Connect() has succeeded on the device.
            Does not query the device.
            </remarks>
        </member>
        <member name="P:PiUsbNet.UsbDevice.IsOpen">
            <summary>
            Gets a value that indicates whether the device is open.
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDevice.CheckOpen(System.String)">
            <summary>
            Checks that the device is Open. If not, throws an exception.
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDevice.CheckConnected(System.String)">
            <summary>
            Checks that the device is open and connected. If not, thows an exception.
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Dispose">
            <summary>
            Disposes of resource used by the USBDevice.
            </summary>
            <remarks>
            This method releases the unmanaged device handle associated with the device.
            It also stops the background task that polls the device.
            </remarks>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Dispose(System.Boolean)">
            <summary>
            Disposes of resource used by the UsbDevice.
            </summary>
            <remarks>
            This method releases the unmanaged device handle associated with the device.
            </remarks>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Log(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a line to the log file.
            </summary>
            <remarks>
            See the <conceptualLink target="033f55e3-b811-4cf4-b85c-9eb7fa776078"/>
            section for additional information.
            </remarks>
            <param name="logType">The log level for this message.</param>
            <param name="s">The string to write to the log file.</param>
            <conceptualLink target="033f55e3-b811-4cf4-b85c-9eb7fa776078" />
        </member>
        <member name="M:PiUsbNet.UsbDevice.Open(System.Collections.Generic.List{System.Int32})">
            <summary>
            Opens the devices with the specified serial numbers.
            </summary>
            <remarks>
            <para>
            After opening the device, this method will check to see if the devices are currently
            attached to the computer. If all devices are attached they will be connected,
            and the Connected event will be raised, and this method returns true.
            </para>
            <para>
            If one or more devices are not attached, this method returns false. This is not an error.
            When the devices are later attached, the system will automatically connect the
            devices and raise the Connected event.
            </para>
            <para>
            If this instance has devices open, calling this method will close the open devices.
            If a specified serial number is the same as a device currently open, the device
            will be re-opened.
            </para>
            </remarks>
            <param name="serialNumberList">A list of serial numbers of the devices
            open.</param>
            <returns>True if the device is connected.</returns>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Open(System.Int32)">
            <summary>
            Opens the device with the specified serial number.
            </summary>
            <remarks>
            <para>
            After opening the device, this method will check to see if the device is currently
            attached to the computer. If so, the device will be automatically connected, the
            Connected event will be raised, and this method returns true.
            </para>
            <para>
            If the device is not attached, this method returns false. This is not an error.
            When the device is later attached, the system will automatically connect the device
            and raise the Connected event.
            </para>
            <para>
            If this instance has a device open, calling this method will close the open device.
            If the specified serial number is the same as the device currently open, the device
            will be re-opened.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device to open.</param>
            <returns>True if the device is connected.</returns>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Close">
            <summary>
            Closes the device
            </summary>
            <remarks>
            <para>
            Closing the device sets the serial number list to zero length.
            No device can be connected.
            </para>
            <para>
            If the device is connected when the Close method is called, it will disconnect
            the device and raise the Disconnected event.
            </para>
            </remarks>
            <returns>True if a device was connected.</returns>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Connect">
            <summary>
            Attempts to connect to the device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method. </para>
            <para>If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>If the device is already connected, will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.UsbDevice.Disconnect">
            <summary>
            Disconnects from the device.
            </summary>
            <returns>True if the device was previously connected and is now disconnected.</returns>
            <remarks>
            <para>
            You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Disconnected event.
            </para>
            <para>
            If no device is currently connected, does nothing. This is not an error.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.UsbDevice.StartPollingTask">
            <summary>
             Starts the background Polling task
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDevice.PollingLoop">
            <summary>
            Polls the device at a rate determined by the PollingInterval.
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDevice.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
            <remarks>
            This method must be implemented by all derived classes.
            </remarks>
        </member>
        <member name="M:PiUsbNet.UsbDevice.FindDevices(System.Collections.Generic.List{PiUsbNet.PiProductId}@,System.Collections.Generic.List{System.Int32}@,PiUsbNet.PiProductId)">
            <summary>
            Search for connected Picard Industries devices.
            </summary>
            <param name="ProductIdList">A list of
            <see cref="T:PiUsbNet.PiProductId" />
            numbers.
            </param>
            <param name="SerialNumberList"> A list of
            device serial numbers.
            </param>
            <param name="DesiredProductId"> The
            <see cref="T:PiUsbNet.PiProductId" />
            of the type of product to search for.
            Specify
            <see cref="F:PiUsbNet.PiProductId.All" />
            to search for all Picard Industries products.
            </param>
        </member>
        <member name="T:PiUsbNet.FilterStatusChangedEventArgs">
            <summary>
            Provides data for the Filter StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.FilterStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the filter is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.FilterStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FilterStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the filter is moving.</param>
        </member>
        <member name="T:PiUsbNet.FilterPositionChangedEventArgs">
            <summary>
            Provides data for the Filter PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.FilterPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.FilterPositionChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FilterPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.Filter">
            <summary>
            Provides an interface to a Filter device.
            </summary>
        </member>
        <member name="P:PiUsbNet.Filter.MinPosition">
            <summary>
            Gets the minimum position for the device.
            </summary>
        </member>
        <member name="P:PiUsbNet.Filter.MaxPosition">
            <summary>
            Gets the maximum position for the device.
            </summary>
            <remarks>
            <para>
            MaxPosition is 16.
            Standard Filter Wheel devices have 6 positions, but custom devices
            can have up to 16 positions.
            </para>
            </remarks>
        </member>
        <member name="E:PiUsbNet.Filter.PositionChanged">
            <summary>
            Occurs when the position of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.Filter.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Filter.OnPositionChanged(PiUsbNet.FilterPositionChangedEventArgs)">
            <summary>
            Raises the FilterChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.Filter.OnStatusChanged(PiUsbNet.FilterStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.Filter.#ctor">
            <summary>
            Initializes a new instance of the Filter class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Filter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Filter class and opens the specified serial
            number.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Filter.Connect">
            <summary>
            Attempts to connect to the Filter device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Filter.IsMoving">
            <summary>
            Gets a value that indicates whether the Filter is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.Filter.Position">
            <summary>
            Gets the position of the Filter.
            </summary>
            <remarks>
            <para>
            If the Filter is between positions, it will report position 0.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Filter.MoveTo(System.Int32)">
            <summary>
            Initiates a move to a new position.
            </summary>
            <remarks>
            <para>
            The destination must between 1 and 16.
            If the destination exceeds the number of filter positions on the device,
            the device will not move.
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
        </member>
        <member name="M:PiUsbNet.Filter.Halt">
            <summary>
            Stops all motion.
            </summary>
        </member>
        <member name="P:PiUsbNet.Filter.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Filter.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Filter.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Filter.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Filter devices.
            </summary>
            <param name="SerialNumberList"> A list of /// device serial numbers.</param>
            <remarks>
            <para>
            Filter Wheel, Gradient Wheel, and Rotator devices share the same ProductID, and
            are therefore not distinguishable. This method will return all Filter Wheel,
            Gradient Wheel, and Rotator devices.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.LabJackStatusChangedEventArgs">
            <summary>
            Provides data for the LabJack StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJackStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the motor is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJackStatusChangedEventArgs.IsHoming">
            <summary>
            Gets a value that indicates whether the motor is currently homing.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJackStatusChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LabJackStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the motor is moving.</param>
            <param name="isHoming">True if the motor is currently homing.</param>
        </member>
        <member name="T:PiUsbNet.LabJackPositionChangedEventArgs">
            <summary>
            Provides data for the LabJack PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJackPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJackPositionChangedEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the LabJackPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="newPosition">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.LabJack">
             <summary>
             Provides an interface to a LabJack device.
             </summary>
             <remarks>
             <para>
             LabJack is a composite class.
             It uses a motor device to move a linear stage, but provides
             additional functionality:
                 <list type="bullet">
                 <item> You can convert motor steps to other units, typically mm.</item>
                 <item>You can compensate for the non-linear motion of a LabJack device
                   using Linearization.</item>
                 <item>The multi-step Home procedure is handled automatically.</item>
                 </list>
             </para>
            
             <h3>Linearization</h3>
            
             <para>
             The LabJack device uses a scissor jack for motion. The motion of the pedestal is non-linear with respect
             to the motor motion.
             To compensate for this we apply a linearization algorithm that adjusts for the non-
             linear motion of the jack.
             </para>
             <para>
             The <see cref="P:PiUsbNet.LabJack.Linearization"/> property determines how the
             motor position (in motor steps) is converted to the
             “height” or <see cref="P:PiUsbNet.LabJack.Position"/> property (in mm).
             </para>
             <para>
             If <see cref="P:PiUsbNet.LabJack.Linearization"/> is set to <c>None</c>, no linearization compensation is performed.
             In this case, the LabJack position is calculated using a simple scale factor -- the motor position times
             the MotorStepSize property.
             </para>
             <para>
             If <see cref="P:PiUsbNet.LabJack.Linearization"/> is set to <c>LabJackLinearization</c>,
             the <see cref="P:PiUsbNet.LabJack.BHome"/> and <see cref="P:PiUsbNet.LabJack.Offset"/> properties are used to calculate the position.
             This is the default value and should be used for Picard Industries UBS LabJack devices.
             The <c>BHome</c> and <c>Offset</c> properties are measured when each device is manufactured, and are
             supplied with each device.
             You must set the correct <c>BHome</c> and <c>Offset</c> properties for each device to correctly
             calculate the position.
             In addition the <see cref="P:PiUsbNet.LabJack.LinkLength"/> and <see cref="P:PiUsbNet.LabJack.MotorStepSize"/> properties affect the
             algorithm, and should be left at their default values unless otherwise instructed by Picard Industries.
             </para>
             <para>
             <see cref="P:PiUsbNet.LabJack.Linearization"/> values other than <c>None</c> or <c>LabJackLinearization</c> are reserved for
             future devices that may have a different linearization algorithm.
             </para>
            
             </remarks>
        </member>
        <member name="T:PiUsbNet.LabJack.LinearizationType">
            <summary>
            The type of linearization to apply to the motor position.
            </summary>
            <see cref="T:PiUsbNet.LabJack"/>
        </member>
        <member name="F:PiUsbNet.LabJack.LinearizationType.None">
            <summary>
            No linearization is applied. The LabJack position is the motor position
            converted to mm using the LabJack
            <see cref="P:PiUsbNet.LabJack.MotorStepSize">MotorStepSize</see>.
            </summary>
        </member>
        <member name="F:PiUsbNet.LabJack.LinearizationType.LabJackLinearization">
            <summary>
            LabJack linearization is used, using the LabJack
            <see cref="P:PiUsbNet.LabJack.BHome">BHome</see>> and
            <see cref="P:PiUsbNet.LabJack.Offset">Offset</see> properties.
            </summary>
        </member>
        <member name="E:PiUsbNet.LabJack.PositionChanged">
            <summary>
            Occurs when the position of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.LabJack.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJack.OnPositionChanged(PiUsbNet.LabJackPositionChangedEventArgs)">
            <summary>
            Raises the PositionChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.OnStatusChanged(PiUsbNet.LabJackStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.#ctor">
            <summary>
            Initializes a new instance of the LabJack class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJack.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LabJack class and opens the specified
            serial number.
            </summary>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.Close">
            <summary>
            Closes the device
            </summary>
            <remarks>
            <para>
            If the device is connected when the Close method is called, it will disconnect
            the device and raise the Disconnected event.
            </para>
            <para>
            Close does not stop an ongoing move operation. The move will continue to its destination.
            </para>
            <para>
            Close will stop an ongoing home operation.
            </para>
            </remarks>
            <returns>True if a device was connected.</returns>
        </member>
        <member name="M:PiUsbNet.LabJack.Connect">
            <summary>
            Attempts to connect to the LabJack device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.Linearization">
            <summary>
            Gets or sets a value that indicates what kind of linearization (if any)
            is being applied to the device position.
            </summary>
            <remarks>
            See the discussion of Linearization in the Remarks section of the <see cref="T:PiUsbNet.LabJack"/>
            class documentation.
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.Velocity">
            <summary>
            Gets or sets the velocity.
            </summary>
            <remarks>
            <para>
            The velocity is an integer between 1 and 12, where 1 is the
            slowest speed and 12 is the fastest speed.
            </para>
            <para>We recommend that you limit your velocity to be 10 or less.
            These velocities should work well with most devices you connect to the LabJack.
            If your load is small and light, you may be able to use faster velocities
            (11 and 12). If you attempt to move too large a load at too high a speed,
            the motor may stall, or may miss steps and not move the full distance.
            </para>
            <para>The following table shows the velocity settings and the approximate
            speed they correspond to.
            </para>
            <list type="table">
              <listheader>
                <term>Velocity</term>
                <description>Steps/Second</description>
              </listheader>
              <item>
                <term>1</term> <description>133</description>
              </item>
              <item>
                <term>2</term> <description>143</description>
              </item>
              <item>
                <term>3</term> <description>154</description>
              </item>
              <item>
                <term>4</term> <description>167</description>
              </item>
              <item>
                <term>5</term> <description>182</description>
              </item>
              <item>
                <term>6</term> <description>200</description>
              </item>
              <item>
                <term>7</term> <description>222</description>
              </item>
              <item>
                <term>8</term> <description>250</description>
              </item>
              <item>
                <term>9</term> <description>286</description>
              </item>
              <item>
                <term>10</term> <description>333</description>
              </item>
              <item>
                <term>11</term> <description>400</description>
              </item>
              <item>
                <term>12</term> <description>500</description>
              </item>
            </list>
            <para>
            The velocity is fixed for the duration of a move.
            If you change the velocity while the motor is moving,
            the change will apply to the next move.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.BHome">
            <summary>
            Gets or sets a linearization calibration value determined for each LabJack device.
            </summary>
            <remarks>
            See the discussion of Linearization in the Remarks section of the <see cref="T:PiUsbNet.LabJack"/>
            class documentation.
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.Offset">
            <summary>
            Gets or sets a linearization calibration value determined for each LabJack device.
            </summary>
            <remarks>
            See the discussion of Linearization in the Remarks section of the <see cref="T:PiUsbNet.LabJack"/>
            class documentation.
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.MotorStepSize">
            <summary>
            Gets or sets the distance, in mm, that the motor shaft is moved for a
            single step of the motor.
            </summary>
            <value>
            The default value is 0.00015875 mm.
            Do not change this value unless you are using non-standard hardware.
            </value>
        </member>
        <member name="P:PiUsbNet.LabJack.LinkLength">
            <summary>
            Gets or sets the length, in mm, of one “link” in the LabJack scissor
            motion.
            </summary>
            <value>
            The default value is 38.1mm.
            Do not change this value unless you are using non-standard hardware.
            </value>
        </member>
        <member name="P:PiUsbNet.LabJack.MinSteps">
            <summary>
            Gets or sets the minimum step number that the motor can
            safely move to.
            </summary>
            <value>
            The default value is 1 step.
            Do not change this value unless you are using non-standard hardware.
            </value>
        </member>
        <member name="P:PiUsbNet.LabJack.MaxSteps">
            <summary>
            Gets or sets the maximum step number that the motor can
            safely move to.
            </summary>
            <value>
            The default value is 200,000 steps.
            Do not change this value unless you are using non-standard hardware.
            </value>
        </member>
        <member name="M:PiUsbNet.LabJack.Halt">
            <summary>
            Stops all motion.
            </summary>
            <remarks>
            Halt will stop any Move or Home operation.
            </remarks>
        </member>
        <member name="M:PiUsbNet.LabJack.Home">
            <summary>
            Initiates the home procedure on the motor.
            </summary>
            <remarks>
            <para>
            The LabJack uses a multi-step home procedure to ensure a reliable home position.
            </para>
            <para>
            Call this method to initiate the home procedure.
            Homing is initiated and the method returns without waiting for homing to complete.
            </para>
            <para>
            You can check whether the device has finished homing with the
            <see cref="P:PiUsbNet.LabJack.IsHoming"/> property or the
            <see cref="M:PiUsbNet.LabJack.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">GetStatus</see> or
            <see cref="M:PiUsbNet.LabJack.GetPositionAndStatusAll(System.Double@,System.Int32@,System.Boolean@,System.Boolean@)">GetStatusAll</see>
            methods.
            </para>
            </remarks>
            <seealso cref="P:PiUsbNet.LabJack.IsHoming"/>
        </member>
        <member name="M:PiUsbNet.LabJack.MoveTo(System.Double)">
            <summary>
            Starts moving to a destination position.
            </summary>
            <remarks>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </remarks>
            <param name="destination">The destination position of the move, in mm.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.MoveToSteps(System.Int32)">
            <summary>
            Starts moving to a destination step position.
            </summary>
            <remarks>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            <para>
            This method is normally used only for diagnostics and testing purposes.
            Use the <see cref="M:PiUsbNet.LabJack.MoveTo(System.Double)">MoveTo</see>
            method for normal operation.
            </para>
            </remarks>
            <param name="destinationSteps">The destination position of the move, in motor steps.
            The position of the motor shaft, without any scaling or Linearization compensation.
            </param>
        </member>
        <member name="M:PiUsbNet.LabJack.IsValidPosition(System.Double)">
            <summary>
            Gets a value indicating whether the specified position can be
            reached by the LabJack.
            </summary>
            <param name="position">The target position, in mm.</param>
            <returns>Whether the specified position can be reached by the LabJack.</returns>
        </member>
        <member name="M:PiUsbNet.LabJack.IsValidPositionSteps(System.Int32)">
            <summary>
            Gets a value indicating whether the specified position can be
            reached by the LabJack.
            </summary>
            <param name="positionSteps">The target position, in motor steps.
            </param>
            <returns>Whether the specified position can be reached by the LabJack.</returns>
            <remarks>
            <para>
            The positionSteps value is the position of the motor shaft, and does not
            reflect any scaling or Linearization compensation.
            </para>
            <para>
            A value can be reached if it is between the
            <see cref="P:PiUsbNet.LabJack.MinSteps"/> and <see cref="P:PiUsbNet.LabJack.MaxSteps"/> values.
            </para>
            <para>
            This method is normally used only for diagnostics and testing purposes.
            Use the <see cref="M:PiUsbNet.LabJack.IsValidPosition(System.Double)">IsValidPosition()</see>
            method for normal operation.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.LabJack.Position">
            <summary>
            Gets the position of the motor, in mm.
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJack.IsHoming">
            <summary>
            Gets a value indicating whether the LabJack is performing the home procedure.
            </summary>
            <seealso cref="M:PiUsbNet.LabJack.Home"/>
        </member>
        <member name="P:PiUsbNet.LabJack.IsMoving">
            <summary>
            Gets a value indicating whether the LabJack is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJack.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the current device position and status in a single method call.
            </summary>
            <remarks>
            <para>
            This method returns the value of the Position, IsMoving, and
            IsHoming properties.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position, in mm.</param>
            <param name="isMoving">A value indicating whether the LabJack is moving.</param>
            <param name="isHoming">A value indicating whether the LabJack is homing.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.GetPositionAndStatusAll(System.Double@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the current device position status in a single method call.
            </summary>
            <remarks>
            <para>
            This method is similar to the
            <see cref="M:PiUsbNet.LabJack.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)"> GetStatus </see>
            method, but also returns the motor position in motor steps.
            </para>
            <para>
            This method is normally used only for diagnostics and testing.
            Use the
            <see cref="M:PiUsbNet.LabJack.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)"> GetStatus </see>
            method for normal operation.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position, in mm.</param>
            <param name="positionSteps">The current position, in steps.
            The position of the motor shaft without any scaling or Linearization compensation.
            </param>
            <param name="isMoving">A value indicating whether the LabJaci is moving.</param>
            <param name="isHoming">A value indicating whether the LabJack is homing.</param>
        </member>
        <member name="M:PiUsbNet.LabJack.LoadSettingsFromRegistry(System.String)">
             <summary>
             Loads properties from a registry key.
             </summary>
             <remarks>
             <para>
             This method allows easy configuration of the object, and provides
             consistent operation across applications.
             </para>
            
             <para>
             You must be connected to the device before calling this method.
             If you Disconnect and re-Connect to the device, you should call this
             method again.
             </para>
             <para>
             The properties set by this method are:
             </para>
                 <list type="bullet">
                 <item><see cref="P:PiUsbNet.LabJack.BHome"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Linearization"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.LinkLength"/> </item>
                 <item><see cref="P:PiUsbNet.LabJack.MinSteps"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.MaxSteps"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.MotorStepSize"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Offset"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Velocity"/></item>
                 </list>
             <para>
             The <see cref="P:PiUsbNet.UsbDevice.SerialNumber"/> property is not affected by this method,
             since you must be connected to the device before loading the settings.
             </para>
             </remarks>
             <param name="keyName">The registry keyName to be used.
             This is not the full path to the key, but is relative to HKCU\Software\Picard Industries.
             The standard keyName used by the USB 4D-Labjack software is USB 4D-LabJack\LegN,
             where N is 1, 2, or 3 (not 0 through 2).</param>
        </member>
        <member name="M:PiUsbNet.LabJack.SaveSettingsToRegistry(System.String)">
             <summary>
             Saves properties to a registry key.
             </summary>
             <remarks>
             <para>
             This method allows easy configuration of the object, and provides
             consistent operation across applications.
             </para>
            
             <para>
             You must be connected to the device before calling this method.
             </para>
             <para>
             The properties saved by this method are:
             </para>
                 <list type="bullet">
                 <item><see cref="P:PiUsbNet.LabJack.BHome"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Linearization"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.LinkLength"/> </item>
                 <item><see cref="P:PiUsbNet.LabJack.MinSteps"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.MaxSteps"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.MotorStepSize"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Offset"/></item>
                 <item><see cref="P:PiUsbNet.LabJack.Velocity"/></item>
                 </list>
             <para>
             The <see cref="P:PiUsbNet.UsbDevice.SerialNumber"/> property is not
             saved by this method, since you must be connected
             to the device before loading or saving the settings.
             </para>
             </remarks>
             <param name="keyName">The registry keyName to be used.
             This is not the full path to the key, but is relative to HKCU\Software\Picard Industries.
             The standard keyName used by the USB 4D-Labjack software is USB 4D-LabJack\LegN,
             where N is 1, 2, or 3 (not 0 through 2).</param>
        </member>
        <member name="P:PiUsbNet.LabJack.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJack.PreviousPositionSteps">
            <summary>
            Gets or sets the sensor position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJack.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.LabJack.PreviousIsHoming">
            <summary>
            Gets or sets the IsHomikng status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.LabJack.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="T:PiUsbNet.LaserState">
            <summary>
            The state of the Laser device.
            </summary>
        </member>
        <member name="F:PiUsbNet.LaserState.Off">
            <summary>
            The Laser is off.
            </summary>
        </member>
        <member name="F:PiUsbNet.LaserState.On">
            <summary>
            The Laser is on.
            </summary>
        </member>
        <member name="T:PiUsbNet.LaserStateChangedEventArgs">
            <summary>
            Provides data for the Laser StateChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.LaserStateChangedEventArgs.State">
            <summary>
            Gets a value that indicates the state of the laser.
            </summary>
        </member>
        <member name="M:PiUsbNet.LaserStateChangedEventArgs.#ctor(PiUsbNet.LaserState)">
            <summary>
            Initializes a new instance of the LaserStateChangedEventArgs class using
            the specified new state.
            </summary>
            <param name="state">The laser state.</param>
        </member>
        <member name="T:PiUsbNet.Laser">
            <summary>
            Provides an interface to a Laser device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Laser.StateChanged">
            <summary>
            Occurs when the state of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Laser.OnStateChanged(PiUsbNet.LaserStateChangedEventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new state.</param>
        </member>
        <member name="M:PiUsbNet.Laser.#ctor">
            <summary>
            Initializes a new instance of the Laser class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Laser.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Laser class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Laser.Connect">
            <summary>
            Attempts to connect to the Laser device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Laser.State">
            <summary>
            Gets or sets the state of the laser.
            </summary>
        </member>
        <member name="P:PiUsbNet.Laser.PreviousState">
            <summary>
            Gets or sets the state from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Laser.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Laser.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Laser devices.
            </summary>
            <param name="SerialNumberList"> A list of device serial numbers.</param>
        </member>
        <member name="T:PiUsbNet.MotorStatusChangedEventArgs">
            <summary>
            Provides data for the Motor StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.MotorStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the motor is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.MotorStatusChangedEventArgs.IsHoming">
            <summary>
            Gets a value that indicates whether the motor is currently homing.
            </summary>
        </member>
        <member name="P:PiUsbNet.MotorStatusChangedEventArgs.IsHomed">
            <summary>
            Gets a value that indicates whether the motor has been homed.
            </summary>
        </member>
        <member name="M:PiUsbNet.MotorStatusChangedEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MotorStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the motor is moving.</param>
            <param name="isHoming">True if the motor is currently homing.</param>
            <param name="isHomed">True if the motor has been homed.</param>
        </member>
        <member name="T:PiUsbNet.MotorPositionChangedEventArgs">
            <summary>
            Provides data for the Motor PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.MotorPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.MotorPositionChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MotorPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="newPosition">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.Motor">
            <summary>
            Provides an interface to a Motor device.
            </summary>
            <remarks>
            <para>
            The USB Motor uses a stepper motor to rotate a shaft. The shaft is typically
            attached to a screw which moves a stage.
            </para>
            <para>
            The motor position is specified in motor steps.
            The relation between motor steps and physical distance will depend on the pitch of
            the screw.
            There are 200 steps for each revolution of the shaft.
            </para>
            <para>
            You can specify any position between 1 and 2^31-1 (+2147483647), but the physical
            upper limit depends on the device. See the <see cref="M:PiUsbNet.Motor.MoveTo(System.Int32)"/> method
            for a list of devices and their upper limits.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.Motor.HomingState">
            <summary>
            State of the homing operation
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.AllowMotionWithoutHome">
            <summary>
            Gets or sets a value that indicates whether MoveTo commands are allowed
            without homing the motor.
            </summary>
            <remarks>
            For most applications this value should be false.
            You can set this property true for testing, or if you have an application where
            the absolute position of the motor does not matter.
            </remarks>
        </member>
        <member name="P:PiUsbNet.Motor.HomeTimeout">
            <summary>
            Gets or sets the timeout value for the homing operation.
            </summary>
            <remarks>
            If set to TimeSpan.Zero (the default value), no timeout will be applied.
            In this case the motor will search forever for the home switch.
            </remarks>
        </member>
        <member name="E:PiUsbNet.Motor.PositionChanged">
            <summary>
            Occurs when the position of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.Motor.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Motor.OnPositionChanged(PiUsbNet.MotorPositionChangedEventArgs)">
            <summary>
            Raises the PositionChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.Motor.OnStatusChanged(PiUsbNet.MotorStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.Motor.#ctor">
            <summary>
            Initializes a new instance of the Motor class.
            </summary>
        </member>
        <member name="M:PiUsbNet.Motor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Motor class and opens the specified serial
            number.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Motor.Close">
            <summary>
            Closes the device
            </summary>
            <remarks>
            <para>
            If the device is connected when the Close method is called, it will disconnect
            the device and raise the Disconnected event.
            </para>
            <para>
            Close does not stop an ongoing move operation. The move will continue to its destination.
            </para>
            <para>
            Close will stop an ongoing home operation.
            </para>
            </remarks>
            <returns>True if a device was connected.</returns>
        </member>
        <member name="M:PiUsbNet.Motor.Connect">
            <summary>
            Attempts to connect to the Motor device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Motor.Disconnect">
            <summary>
            Disconnects from the device.
            </summary>
            <returns>True if the device was previously connected and is not disconnected.</returns>
            <remarks>
            <para>
            You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise the Disconnected event.
            </para>
            <para>
            If no device is currently connected, does nothing and returns false. This is not an error.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Motor.Home(System.Int32)">
             <summary>
             Initiates the home search algorithm at a specified velocity
             </summary>
             <remarks>
             <para>
             Call this method to initiate the home procedure.
             Homing is initiated and the method returns without waiting for homing to complete.
             </para>
            
             <para>
             When homing is complete you will receive a <see cref="E:PiUsbNet.Motor.StatusChanged"/> event.
             You can also check whether the device has finished homing with the
             <see cref="P:PiUsbNet.Motor.IsHoming"/>
             property or the
             <see cref="M:PiUsbNet.Motor.GetPositionAndStatus(System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">GetPositionAndStatus</see>
             method.
             </para>
             <para>
             Homing can fail if you have set a <see cref="P:PiUsbNet.Motor.HomeTimeout"/>. After homing is complete you
             should check the <see cref="P:PiUsbNet.Motor.IsHomed"/> property.
             </para>
             </remarks>
             <param name="velocity">The <see cref="P:PiUsbNet.Motor.Velocity"/> to set before homing.</param>
        </member>
        <member name="M:PiUsbNet.Motor.Home">
             <summary>
             Initiates the home search algorithm.
             </summary>
             <remarks>
             <para>
             This method is similar to the <see cref="M:PiUsbNet.Motor.Home(System.Int32)"/> method,
             except that  it uses the most recently set velocity.
             </para>
             <para>
             Call this method to initiate the home procedure.
             Homing is initiated and the method returns without waiting for homing to complete.
             </para>
            
             <para>
             You can check whether the device has finished homing with the
             <see cref="P:PiUsbNet.Motor.IsHoming"/>
             property or the
             <see cref="M:PiUsbNet.Motor.GetPositionAndStatus(System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">GetPositionAndStatus</see>
             method.
             </para>
             </remarks>
        </member>
        <member name="P:PiUsbNet.Motor.Velocity">
            <summary>
            Gets or sets the velocity.
            </summary>
            <remarks>
            <para>
            The velocity is an integer between 1 and 12, where 1 is the
            slowest speed and 12 is the fastest speed.
            </para>
            <para>We recommend that you limit your velocity to be 10 or less.
            These velocities should work well with most devices you connect to the Motor.
            If your load is small and light, you may be able to use faster velocities
            (11 and 12). If you attempt to move too large a load at too high a speed,
            the motor may stall, or may miss steps and not move the full distance.
            </para>
            <para>The following table shows the velocity settings and the approximate
            speed they correspond to.
            </para>
            <list type="table">
              <listheader>
                <term>Velocity</term>
                <description>Steps/Second</description>
              </listheader>
              <item>
                <term>1</term> <description>133</description>
              </item>
              <item>
                <term>2</term> <description>143</description>
              </item>
              <item>
                <term>3</term> <description>154</description>
              </item>
              <item>
                <term>4</term> <description>167</description>
              </item>
              <item>
                <term>5</term> <description>182</description>
              </item>
              <item>
                <term>6</term> <description>200</description>
              </item>
              <item>
                <term>7</term> <description>222</description>
              </item>
              <item>
                <term>8</term> <description>250</description>
              </item>
              <item>
                <term>9</term> <description>286</description>
              </item>
              <item>
                <term>10</term> <description>333</description>
              </item>
              <item>
                <term>11</term> <description>400</description>
              </item>
              <item>
                <term>12</term> <description>500</description>
              </item>
            </list>
            <para>
            The velocity is fixed for the duration of a move.
            If you change the velocity while the motor is moving,
            the change will apply to the next move.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Motor.IsMoving">
            <summary>
            Gets a value that indicates whether the motor is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.IsHoming">
            <summary>
            Gets a value that indicates whether the motor is currently homing.
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.IsHomed">
            <summary>
            Gets a value that indicates whether the motor has been homed.
            </summary>
            <remarks>
            <para>
            When the device is first opened, the IsHomed property will be false.
            It will be set true after a
            <see cref="M:PiUsbNet.Motor.Home">homing</see>
            operation completes successfully.
            </para>
            <para>
            When you call the <see cref="M:PiUsbNet.Motor.Home">Home</see> method, IsHomed is set false until
            the homing operation completes successfully.
            If the Home method fails, IsHomed will remain false.
            </para>
            <para>
            If the device is disconnected, IsHomed will be set false.
            This occurs when the device is physically disconnected, or if you call the
            <see cref="M:PiUsbNet.Motor.Close"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Motor.Position">
            <summary>
            Gets the position of the motor.
            </summary>
        </member>
        <member name="M:PiUsbNet.Motor.MoveTo(System.Int32,System.Int32)">
            <summary>
            Initiates a move to a new position at the specified velocity.
            </summary>
            <remarks>
            <para>
            The destination must between 0 and the maximum count for the particular motor:
            </para>
            <list type="table">
              <listheader>
                <term>Device</term>
                <description>Maximum position (steps)</description>
              </listheader>
              <item>
                <term>USB-MOTOR</term> <description>1,900</description>
              </item>
              <item>
                <term>USB-MOTOR II</term> <description>5,800</description>
              </item>
              <item>
                <term>USB-PUSHER</term> <description>50,000</description>
              </item>
              <item>
                <term>USB-LabJack</term> <description>200,000</description>
              </item>
            </list>
            <para>
            You cannot move to position 0 (home).
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
            <param name="velocity">The <see cref="P:PiUsbNet.Motor.Velocity"/> to use for the move.</param>
        </member>
        <member name="M:PiUsbNet.Motor.MoveTo(System.Int32)">
            <summary>
            Initiates a move to a new position.
            </summary>
            <remarks>
            <para>
            This method is similar to the <see cref="M:PiUsbNet.Motor.MoveTo(System.Int32,System.Int32)"/> method,
            except that it uses the most recently set velocity.
            </para>
            <para>
            The destination must between 0 and the maximum count for the particular motor:
            </para>
            <list type="table">
              <listheader>
                <term>Device</term>
                <description>Maximum position (steps)</description>
              </listheader>
              <item>
                <term>USB-MOTOR</term> <description>1,900</description>
              </item>
              <item>
                <term>USB-MOTOR II</term> <description>5,800</description>
              </item>
              <item>
                <term>USB-PUSHER</term> <description>50,000</description>
              </item>
              <item>
                <term>USB-LabJack</term> <description>200,000</description>
              </item>
            </list>
            <para>
            You cannot move to position 0 (home).
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
        </member>
        <member name="M:PiUsbNet.Motor.Halt">
            <summary>
            Stops all motion.
            </summary>
            <remarks>
            Halt will stop any Move or Home operation.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Motor.GetPositionAndStatus(System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the position and status of the motor.
            </summary>
            <remarks>
            <para>
            This method gets the current motor status in a single method call.
            It returns the value of the
            <see cref="P:PiUsbNet.Motor.Position"/>,
            <see cref="P:PiUsbNet.Motor.IsMoving"/>,
            <see cref="P:PiUsbNet.Motor.IsHoming"/>, and
            <see cref="P:PiUsbNet.Motor.IsHomed"/>
            properties.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position.</param>
            <param name="isMoving">A value that indicates whether the motor is moving.</param>
            <param name="isHoming">A value that indicates whether the motor currently homing.</param>
            <param name="isHomed">A value that indicates whether the motor has been homed.</param>
        </member>
        <member name="P:PiUsbNet.Motor.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.PreviousIsHoming">
            <summary>
            Gets or sets the IsHoming status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Motor.PreviousIsHomed">
            <summary>
            Gets or sets the IsHomed status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Motor.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Motor.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries motor devices.
            </summary>
            <param name="SerialNumberList"> A list of device serial numbers.</param>
        </member>
        <member name="T:PiUsbNet.RelayStateChangedEventArgs">
            <summary>
            Provides data for the Relay StateChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.RelayStateChangedEventArgs.States">
            <summary>
            Gets a value that indicates the state of the relays.
            </summary>
        </member>
        <member name="M:PiUsbNet.RelayStateChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RelayStateChangedEventArgs class using
            the specified new states.
            </summary>
            <param name="states">The relay states.</param>
        </member>
        <member name="T:PiUsbNet.Relay">
            <summary>
            Provides an interface to a Relay device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Relay.StateChanged">
            <summary>
            Occurs when the state of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Relay.OnStateChanged(PiUsbNet.RelayStateChangedEventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new states.</param>
        </member>
        <member name="M:PiUsbNet.Relay.#ctor">
            <summary>
            Initializes a new instance of the Relay class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Relay.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Relay class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Relay.Connect">
            <summary>
            Attempts to connect to the Relay device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Relay.States">
            <summary>
            Gets or sets the state of the relays.
            </summary>
            <value>
            The value contains one bit for each relay.
            Bit 0 (LSB) corresponds to relay 0, etc.
            </value>
        </member>
        <member name="P:PiUsbNet.Relay.PreviousStates">
            <summary>
            Gets or sets the states from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Relay.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Relay.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Relay devices.
            </summary>
            <param name="SerialNumberList"> A list of device serial numbers.</param>
            <remarks>
            <para>
            Relay and Valve devices share the same ProductID, and
            are therefore not distinguishable. This method will return all Relay
            and Valve devices.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.RotatorStatusChangedEventArgs">
            <summary>
            Provides data for the Rotator StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.RotatorStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the rotator is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.RotatorStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RotatorStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the Rotator is moving.</param>
        </member>
        <member name="T:PiUsbNet.RotatorPositionChangedEventArgs">
            <summary>
            Provides data for the Rotator PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.RotatorPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.RotatorPositionChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RotatorPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.Rotator">
            <summary>
            Provides an interface to a Rotator device.
            </summary>
        </member>
        <member name="P:PiUsbNet.Rotator.MinPosition">
            <summary>
            Gets the minimum position for the device.
            </summary>
        </member>
        <member name="P:PiUsbNet.Rotator.MaxPosition">
            <summary>
            Gets the maximum position for the device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Rotator.PositionChanged">
            <summary>
            Occurs when the position of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.Rotator.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Rotator.OnPositionChanged(PiUsbNet.RotatorPositionChangedEventArgs)">
            <summary>
            Raises the RotatorChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.Rotator.OnStatusChanged(PiUsbNet.RotatorStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.Rotator.#ctor">
            <summary>
            Initializes a new instance of the Rotator class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Rotator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Rotator class and opens the specified serial
            number.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Rotator.Connect">
            <summary>
            Attempts to connect to the Rotator device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Rotator.IsMoving">
            <summary>
            Gets a value that indicates whether the Rotator is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.Rotator.Position">
            <summary>
            Gets the position of the Rotator.
            </summary>
        </member>
        <member name="M:PiUsbNet.Rotator.MoveTo(System.Int32)">
            <summary>
            Initiates a move to a new position.
            </summary>
            <remarks>
            <para>
            The destination must between 1 and 1023.
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
        </member>
        <member name="M:PiUsbNet.Rotator.Halt">
            <summary>
            Stops all motion.
            </summary>
        </member>
        <member name="P:PiUsbNet.Rotator.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Rotator.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Rotator.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Rotator.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Rotator devices.
            </summary>
            <param name="SerialNumberList"> A List of device serial numbers.</param>
            <remarks>
            <para>
            Filter Wheel, Gradient Wheel, and Rotator devices share the same ProductID, and
            are therefore not distinguishable. This method will return all Filter Wheel,
            Gradient Wheel, and Rotator devices.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.ShutterState">
            <summary>
            The state of the shutter device.
            </summary>
        </member>
        <member name="F:PiUsbNet.ShutterState.Closed">
            <summary>
            The shutter is closed.
            </summary>
        </member>
        <member name="F:PiUsbNet.ShutterState.Open">
            <summary>
            The shutter is open.
            </summary>
        </member>
        <member name="T:PiUsbNet.ShutterStateChangedEventArgs">
            <summary>
            Provides data for the Shutter StateChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.ShutterStateChangedEventArgs.State">
            <summary>
            Gets a value that indicates the state of the shutter.
            </summary>
        </member>
        <member name="M:PiUsbNet.ShutterStateChangedEventArgs.#ctor(PiUsbNet.ShutterState)">
            <summary>
            Initializes a new instance of the ShutterStateChangedEventArgs class using
            the specified new state.
            </summary>
            <param name="state">The shutter state.</param>
        </member>
        <member name="T:PiUsbNet.Shutter">
            <summary>
            Provides an interface to a Shutter device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Shutter.StateChanged">
            <summary>
            Occurs when the state of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Shutter.OnStateChanged(PiUsbNet.ShutterStateChangedEventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new state.</param>
        </member>
        <member name="M:PiUsbNet.Shutter.#ctor">
            <summary>
            Initializes a new instance of the Shutter class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Shutter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Shutter class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Shutter.Connect">
            <summary>
            Attempts to connect to the Shutter device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Shutter.State">
            <summary>
            Gets or sets the state of the shutter.
            </summary>
        </member>
        <member name="P:PiUsbNet.Shutter.PreviousState">
            <summary>
            Gets or sets the state from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Shutter.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Shutter.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Shutter devices.
            </summary>
            <param name="SerialNumberList"> A List of
            device serial numbers.</param>
        </member>
        <member name="T:PiUsbNet.TableStatusChangedEventArgs">
            <summary>
            Provides data for the Table StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.TableStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the table is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.TableStatusChangedEventArgs.IsHoming">
            <summary>
            Gets a value that indicates whether the table is homing.
            </summary>
        </member>
        <member name="M:PiUsbNet.TableStatusChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TableStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the table is moving.</param>
            <param name="isHoming">True if the table is homing.</param>
        </member>
        <member name="T:PiUsbNet.TablePositionChangedEventArgs">
            <summary>
            Provides data for the Table PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.TablePositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.TablePositionChangedEventArgs.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes a new instance of the TablePositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.Table">
            <summary>
            Provides an interface to a Table device.
            </summary>
            <remarks>
            Table is a composite class.
            It links 3 LabJack objects together to form a table that can move
            up and down (Z axis) and tip and tilt (Rx and Ry axes)
            </remarks>
        </member>
        <member name="E:PiUsbNet.Table.PositionChanged">
            <summary>
            Occurs when the position or sensorPosition of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.Table.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.OnPositionChanged(PiUsbNet.TablePositionChangedEventArgs)">
            <summary>
            Raises the TableChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.Table.OnStatusChanged(PiUsbNet.TableStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.Table.#ctor">
            <summary>
            Initializes a new instance of the Table class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the Table class with the specified serial numbers,
            and attempts to connect to it.
            </summary>
            <param name="serialNumberList">
            A list of three serial numbers, which are the
            serial numbers of the LabJack legs.
            </param>
        </member>
        <member name="M:PiUsbNet.Table.CheckLegNumber(System.Int32,System.String)">
            <summary>
            Checks that the leg number is between 0 and 2
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.CheckArraySize(System.Collections.Generic.List{System.Double},System.String)">
            <summary>
            Checks that the array parameter has a size of 3
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.Connect">
            <summary>
            Attempts to connect to the Table device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.GetLeg(System.Int32)">
            <summary>
            Gets a LabJack object being used as a leg.
            </summary>
            <param name="legNumber">The leg number. Must be in the range 0 to 2.</param>
            <remarks>
            <para>
            The returned labjack object is a temporary object. It does not own the
            internal SafeHandle, and the associated native object will not be disconnected
            when the LabJack obejct goes out of scope. The leg is owned by the Table.
            </para>
            </remarks>
            <returns>A LabJack object for the specified leg.</returns>
        </member>
        <member name="M:PiUsbNet.Table.SetLeg(System.Int32,PiUsbNet.LabJack)">
            <summary>
            Sets the LabJack object being used as a leg.
            </summary>
            <param name="legNumber">The leg number. Must be in the range 0 to 2.</param>
            <param name="labJack">The labjack object to use as a leg.</param>
        </member>
        <member name="M:PiUsbNet.Table.GetLegLocationX(System.Int32)">
            <summary>
            Gets the X location for the specified leg.
            </summary>
            <param name="legNumber">The leg number.</param>
            <returns>The X location for the leg.</returns>
            <remarks>
            The location is specified in mm, relative to the coordinate system origin.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.GetLegLocationY(System.Int32)">
            <summary>
            Gets the Y location for the specified leg.
            </summary>
            <param name="legNumber">The leg number.</param>
            <returns>The Y location for the leg.</returns>
            <remarks>
            The location is specified in mm, relative to the coordinate system origin.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.GetLegLocation(System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the X and Y location for the specified leg.
            </summary>
            <param name="legNumber">The leg number.</param>
            <param name="locationX">The X location</param>
            <param name="locationY">The Y location</param>
            <remarks>
            The location is specified in mm, relative to the coordinate system origin.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.SetLegLocation(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the X and Y location for the specified leg.
            </summary>
            <param name="legNumber">The leg number.</param>
            <param name="locationX">The X location</param>
            <param name="locationY">The Y location</param>
            <remarks>
            The location is specified in mm, relative to the coordinate system origin.
            </remarks>
        </member>
        <member name="P:PiUsbNet.Table.IsMoving">
            <summary>
            Gets a value that indicates whether the motor is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.Table.IsHoming">
            <summary>
            Gets a value that indicates whether the motor is currently homing.
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.Halt">
            <summary>
            Stops all motion.
            </summary>
            <remarks>
            Halt will stop any Move or Home operation.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.Home">
            <summary>
            Initiates the home procedure on the table.
            </summary>
            <remarks>
            <para>
            Homing is initiated on all 3 legs simultaneously.
            </para>
            <para>
            This method does not wait for homing to complete.
            Homing is initiated, and the method returns.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Table.MoveTo(System.Collections.Generic.List{System.Double})">
            <summary>
            Starts moving to a destination position.
            </summary>
            <remarks>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="destinationPosition">
            A 3-element array:
            <list type="table">
              <listheader>
                <term>Element</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>0</term> <description>The Z height in mm</description>
              </item>
              <item>
                <term>1</term> <description>The Rx rotation in degrees</description>
              </item>
              <item>
                <term>2</term> <description>The Ry rotation in degrees</description>
              </item>
            </list>
            </param>
        </member>
        <member name="M:PiUsbNet.Table.IsValidPosition(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets a value indicating whether the specified position can be
            reached by the table.
            </summary>
            <param name="position">
            A 3-element list:
            <list type="table">
              <listheader>
                <term>Element</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>0</term> <description>The Z height in mm</description>
              </item>
              <item>
                <term>1</term> <description>The Rx rotation in degrees</description>
              </item>
              <item>
                <term>2</term> <description>The Ry rotation in degrees</description>
              </item>
            </list>
            </param>
            <returns>Whether the specified position can be reached by the table.</returns>
        </member>
        <member name="P:PiUsbNet.Table.Position">
            <summary>
            Gets the current position of the Table.
            </summary>
            <value>
            A 3-element list:
            <list type="table">
              <listheader>
                <term>Element</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>0</term> <description>The Z height in mm</description>
              </item>
              <item>
                <term>1</term> <description>The Rx rotation in degrees</description>
              </item>
              <item>
                <term>2</term> <description>The Ry rotation in degrees</description>
              </item>
            </list>
            </value>
        </member>
        <member name="M:PiUsbNet.Table.GetPositionAndStatus(System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Boolean}@,System.Collections.Generic.List{System.Boolean}@,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Gets the current table position and the status of each leg.
            </summary>
            <remarks>
            Returns the value of the Table
            <see cref="P:PiUsbNet.Table.Position"/> property, along with the LabJack
            <see cref="P:PiUsbNet.LabJack.IsMoving"/>,
            <see cref="P:PiUsbNet.LabJack.IsHoming"/>, and
            <see cref="P:PiUsbNet.UsbDevice.IsConnected"/>
            properties for each leg.
            </remarks>
            <param name="position">A 3-element array representing
            the Z height (in mm), the Rx rotation (in degrees), and
            the Ry rotation (in degrees).</param>
            <param name="isMoving">A 3-element array representing the <see cref="P:PiUsbNet.LabJack.IsMoving"/>
            status for each of the 3 LabJack legs.</param>
            <param name="isHoming">A 3-element array representing the <see cref="P:PiUsbNet.LabJack.IsHoming"/>
            status for each of the 3 LabJack legs.</param>
            <param name="isConnected">A 3-element array representing the <see cref="P:PiUsbNet.UsbDevice.IsConnected"/>
            status for each of the 3 LabJack legs.</param>
        </member>
        <member name="M:PiUsbNet.Table.LoadSettingsFromRegistry(System.String)">
            <summary>
            Loads properties from a registry key.
            </summary>
            <remarks>
            <para>
            This method allows easy configuration of the object, and provides
            consistent operation across applications.
            </para>
            <para>
            The method calls the LoadSettingsFromRegistry method for each of
            the LabJack legs.
            It also loads the <see cref="M:PiUsbNet.Table.GetLegLocationX(System.Int32)">LegLocationX</see>
            and <see cref="M:PiUsbNet.Table.GetLegLocationY(System.Int32)">LegLocationY</see>
            properties for each leg.
            </para>
            <para>
            You must connect to the device before calling this method.
            If you Disconnect and re-Connect to the device, you should call this
            method again.
            </para>
            <para>
            The <see cref="P:PiUsbNet.UsbDevice.SerialNumberList" /> property is not affected by this method,
            since you must connect to the device before loading the settings.
            </para>
            </remarks>
            <param name="keyName">The registry keyName to be used.
            This is not a full path to the key, but is relative to HKCU\Software\Picard Industries\
            The standard keyName used by the USB 4D-Labjack software is "USB 4D-LabJack\LegN",
            where N is 1, 2, and 3.
            </param>
        </member>
        <member name="M:PiUsbNet.Table.SaveSettingsToRegistry(System.String)">
            <summary>
            Saves properties to a registry key.
            </summary>
            <remarks>
            <para>
            This method allows easy configuration of the object, and provides
            consistent operation across applications.
            </para>
            <para>
            The method calls the SaveSettingsFromRegistry method for each of
            the LabJack legs.
            It also saves the <see cref="M:PiUsbNet.Table.GetLegLocationX(System.Int32)">LegLocationX</see>
            and <see cref="M:PiUsbNet.Table.GetLegLocationY(System.Int32)">LegLocationY</see>
            properties for each leg.
            </para>
            <para>
            You must connect to the device before calling this method.
            </para>
            <para>
            The <see cref="P:PiUsbNet.UsbDevice.SerialNumberList" /> property is not saved by this method,
            since you must connect to the device before loading or saving the settings.
            </para>
            </remarks>
            <param name="keyName">The registry keyName to be used.
            This is not a full path to the key, but is relative to HKCU\Software\Picard Industries\
            The standard keyName used by the USB 4D-Labjack software is "USB 4D-LabJack\LegN",
            where N is 1, 2, and 3.
            </param>
        </member>
        <member name="P:PiUsbNet.Table.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Table.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Table.PreviousIsHoming">
            <summary>
            Gets or sets the IsHoming status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Table.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="T:PiUsbNet.TwisterStatusChangedEventArgs">
            <summary>
            Provides data for the Twister StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.TwisterStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the twister is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.TwisterStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TwisterStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the twister is moving.</param>
        </member>
        <member name="T:PiUsbNet.TwisterPositionChangedEventArgs">
            <summary>
            Provides data for the Twister PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.TwisterPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="P:PiUsbNet.TwisterPositionChangedEventArgs.SensorPosition">
            <summary>
            Gets a value that is the new sensor position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.TwisterPositionChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TwisterPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
            <param name="sensorPosition">The new sensorPosition of the device.</param>
        </member>
        <member name="T:PiUsbNet.Twister">
             <summary>
             Provides an interface to a Twister device.
             </summary>
             <remarks>
             <para>
             The USB Twister uses a stepper motor to rotate a shaft.
             </para>
             <para>
             The twister position is specified in motor steps.
             There are 200 steps for each revolution of the shaft, so each step corresponds to 1.8 degrees.
             You can specify any position between -32767 and +32767.
             If you specify a position less than -32767, the twister will move to position -32767.
             If you specify a position greater than +32767, the twister will move to position +32767.
             </para>
             <para>
             You can command the twister to move continuously in either the + or – direction with the
             <see cref="M:PiUsbNet.Twister.RunContinuous(System.Int32)">RunContinuous</see> method.
             When you call this method, the position is set to zero and remains
             there during the continuous move. You can leave the twister running for as long as you wish.
             </para>
             <para>
             The positive direction (increasing counts) is counter-clockwise rotation if you are
             looking at the USB Twister from the shaft end.
             </para>
            
             <h3>Absolute position sensor</h3>
            
             <para>
             Some versions of the Twister include an integrated
             absolute position sensor.
             This is used in the
             <see cref="T:PiUsbNet.ZRotary"/> device to provide motion limits and a home position.
             </para>
             <para>
             The sensor is a rotary potentiometer which is read by an A/D converter.
             It reports the position of the twister motor shaft as a 10-bit value
             (0 to 1023) in A/D "counts".
             </para>
             <para>
             The sensor resolution is not as fine as motor steps, but it provides an
             absolute position rather than relative to the power-on or user set zero position.
             This absolute position can be used to establish a home or zero position, and
             provide motion limits.
             </para>
             </remarks>
        </member>
        <member name="E:PiUsbNet.Twister.PositionChanged">
            <summary>
            Occurs when the position or sensorPosition of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.Twister.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Twister.OnPositionChanged(PiUsbNet.TwisterPositionChangedEventArgs)">
            <summary>
            Raises the TwisterChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.Twister.OnStatusChanged(PiUsbNet.TwisterStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.Twister.#ctor">
            <summary>
            Initializes a new instance of the Twister class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Twister.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Twister class and opens the specified serial
            number.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Twister.Close">
            <summary>
            Closes the device
            </summary>
            <remarks>
            <para>
            If the device is connected when the Close method is called, it will disconnect
            the device and raise the Disconnected event.
            </para>
            <para>
            Close does not stop an ongoing move operation. The move will continue to its destination.
            </para>
            </remarks>
            <returns>True if a device was connected.</returns>
        </member>
        <member name="M:PiUsbNet.Twister.Connect">
            <summary>
            Attempts to connect to the Twister device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Twister.Velocity">
            <summary>
            Gets or sets the velocity.
            </summary>
            <remarks>
            <para>
            The velocity is an integer between 1 and 13, where 1 is the
            slowest speed and 13 is the fastest speed.
            </para>
            <para>We recommend that you limit your velocity to be 10 or less.
            These velocities should work well with most devices you connect to the Twister.
            If your load is small and light, you may be able to use faster velocities
            (between 11 and 13). If you attempt to move too large a load at too high a speed,
            the motor may stall, or may miss steps and not move the full distance.
            </para>
            <para>The following table shows the velocity settings and the approximate
            speed they correspond to.
            </para>
            <list type="table">
              <listheader>
                <term>Velocity</term>
                <description>Steps/Second</description>
                <description>Degrees/Second</description>
                <description>RPM</description>
              </listheader>
              <item>
                <term>1</term>
                <description>133</description>
                <description>240</description>
                <description>40</description>
              </item>
              <item>
                <term>2</term>
                <description>143</description>
                <description>240</description>
                <description>40</description>
              </item>
              <item>
                <term>3</term>
                <description>154</description>
                <description>277</description>
                <description>46</description>
              </item>
              <item>
                <term>4</term>
                <description>167</description>
                <description>300</description>
                <description>50</description>
              </item>
              <item>
                <term>5</term>
                <description>182</description>
                <description>328</description>
                <description>55</description>
              </item>
              <item>
                <term>6</term>
                <description>200</description>
                <description>360</description>
                <description>60</description>
              </item>
              <item>
                <term>7</term>
                <description>222</description>
                <description>400</description>
                <description>67</description>
              </item>
              <item>
                <term>8</term>
                <description>250</description>
                <description>450</description>
                <description>75</description>
              </item>
              <item>
                <term>9</term>
                <description>286</description>
                <description>514</description>
                <description>86</description>
              </item>
              <item>
                <term>10</term>
                <description>333</description>
                <description>600</description>
                <description>100</description>
              </item>
              <item>
                <term>11</term>
                <description>400</description>
                <description>720</description>
                <description>120</description>
              </item>
              <item>
                <term>12</term>
                <description>500</description>
                <description>900</description>
                <description>150</description>
              </item>
              <item>
                <term>13</term>
                <description>667</description>
                <description>1200</description>
                <description>200</description>
              </item>
            </list>
            <para>
            The velocity is fixed for the duration of a move.
            If you change the velocity while the twister is moving,
            the change will apply to the next move.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Twister.IsMoving">
            <summary>
            Gets a value that indicates whether the twister is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.Twister.Position">
            <summary>
            Gets the position of the twister.
            </summary>
        </member>
        <member name="P:PiUsbNet.Twister.SensorPosition">
            <summary>
            Gets the position of sensor.
            </summary>
            <remarks>
            <para>
            If no sensor is present in the Twister, the SensorPosition will be reported as zero.
            </para>
            </remarks>
        </member>
        <member name="M:PiUsbNet.Twister.MoveTo(System.Int32,System.Int32)">
            <summary>
            Initiates a move to a new position at the specified velocity.
            </summary>
            <remarks>
            <para>
            The destination must between -32767 and +32767 motor steps.
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
            <param name="velocity">The <see cref="P:PiUsbNet.Twister.Velocity"/> to use for the move.</param>
        </member>
        <member name="M:PiUsbNet.Twister.MoveTo(System.Int32)">
            <summary>
            Initiates a move to a new position.
            </summary>
            <remarks>
            <para>
            This method is similar to the <see cref="M:PiUsbNet.Twister.MoveTo(System.Int32,System.Int32)"/> method,
            except that it uses the most recently set velocity.
            </para>
            <para>
            The destination must between -32767 and +32767 motor steps.
            </para>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            </remarks>
            <param name="position">The destination position.</param>
        </member>
        <member name="M:PiUsbNet.Twister.RunContinuous(System.Int32,System.Int32)">
            <summary>
            Initiates continuous motion in a direction at a specified velocity.
            </summary>
            <remarks>
            <para>
            The twister position will be set to zero and will remain at zero during
            continuous motion.
            </para>
            </remarks>
            <param name="direction">The direction of the move.
            Use +1 for motion in the positive direction.
            Use -1 for motion in the negative direction.</param>
            <param name="velocity">The velocity to set and use for the motion.</param>
        </member>
        <member name="M:PiUsbNet.Twister.RunContinuous(System.Int32)">
            <summary>
            Initiates continuous motion in a direction at the current velocity.
            </summary>
            <remarks>
            <para>
            This method is similar to the <see cref="M:PiUsbNet.Twister.RunContinuous(System.Int32,System.Int32)"/> method,
            except that it uses the most recently set velocity.
            </para>
            <para>
            The twister position will be set to zero and will remain at zero during
            continuous motion.
            </para>
            </remarks>
            <param name="direction">The direction of the move.
            Use +1 for motion in the positive direction.
            Use -1 for motion in the negative direction.</param>
        </member>
        <member name="M:PiUsbNet.Twister.Halt">
            <summary>
            Stops all motion.
            </summary>
            <remarks>
            Halt will stop any Move or RunContinuous operation.
            </remarks>
        </member>
        <member name="M:PiUsbNet.Twister.GetPositionAndStatus(System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Gets the position and status of the Twister.
            </summary>
            <remarks>
            <para>
            This method gets the current twister position and status in a single method call.
            It returns the value of the
            <see cref="P:PiUsbNet.Twister.Position"/>,
            <see cref="P:PiUsbNet.Twister.SensorPosition"/>, and
            <see cref="P:PiUsbNet.Twister.IsMoving"/>
            properties.
            </para>
            <para>
            If no sensor is present in the Twister, the SensorPosition will be reported as zero.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position.</param>
            <param name="sensorPosition">The current value from the sensor.</param>
            <param name="isMoving">A value that indicates whether the Twister is moving.</param>
        </member>
        <member name="M:PiUsbNet.Twister.SetZero">
            <summary>
            Sets the current position to be zero.
            </summary>
            <remarks>
            <para>
            If the twister is moving, it will be halted before setting the position to zero.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Twister.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Twister.PreviousSensorPosition">
            <summary>
            Gets or sets the sensor position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.Twister.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Twister.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Twister.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Twister devices.
            </summary>
            <param name="SerialNumberList"> A List of device serial numbers.</param>
        </member>
        <member name="T:PiUsbNet.ValveStateChangedEventArgs">
            <summary>
            Provides data for the Valve StateChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.ValveStateChangedEventArgs.States">
            <summary>
            Gets a value that indicates the state of the valves.
            </summary>
        </member>
        <member name="M:PiUsbNet.ValveStateChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ValveStateChangedEventArgs class using
            the specified new states.
            </summary>
            <param name="states">The valve states.</param>
        </member>
        <member name="T:PiUsbNet.Valve">
            <summary>
            Provides an interface to a Valve device.
            </summary>
        </member>
        <member name="E:PiUsbNet.Valve.StateChanged">
            <summary>
            Occurs when the state of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.Valve.OnStateChanged(PiUsbNet.ValveStateChangedEventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new states.</param>
        </member>
        <member name="M:PiUsbNet.Valve.#ctor">
            <summary>
            Initializes a new instance of the Valve class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.Valve.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Valve class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <remarks>
            <para>
            If the device is currently attached to the computer the device will be
            automatically connected.
            </para>
            <para>
            If the device is not currently attached to the computer no error occurs.
            When the device is later attached, the system will connect the device
            and raise the Connected event.
            </para>
            </remarks>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.Valve.Connect">
            <summary>
            Attempts to connect to the Valve device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.Valve.States">
            <summary>
            Gets or sets the state of the valves.
            </summary>
            <value>
            The value contains one bit for each valve.
            Bit 0 (LSB) corresponds to valve 0, etc.
            </value>
        </member>
        <member name="P:PiUsbNet.Valve.PreviousStates">
            <summary>
            Gets or sets the states from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.Valve.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="M:PiUsbNet.Valve.FindDevices(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Search for Picard Industries Valve devices.
            </summary>
            <param name="SerialNumberList"> A List of device serial numbers.</param>
            <remarks>
            <para>
            Relay and Valve devices share the same ProductID, and
            are therefore not distinguishable. This method will return all Relay
            and Valve devices.
            </para>
            </remarks>
        </member>
        <member name="T:PiUsbNet.ZRotaryStatusChangedEventArgs">
            <summary>
            Provides data for the ZRotary StatusChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotaryStatusChangedEventArgs.IsMoving">
            <summary>
            Gets a value that indicates whether the table is moving.
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotaryStatusChangedEventArgs.IsHoming">
            <summary>
            Gets a value that indicates whether the table is homing.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotaryStatusChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ZRotaryStatusChangedEventArgs class using
            the specified new status.
            </summary>
            <param name="isMoving">True if the table is moving.</param>
            <param name="isHoming">True if the table is homing.</param>
        </member>
        <member name="T:PiUsbNet.ZRotaryPositionChangedEventArgs">
            <summary>
            Provides data for the ZRotary PositionChanged event
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotaryPositionChangedEventArgs.Position">
            <summary>
            Gets a value that is the new position of the device.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotaryPositionChangedEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the ZRotaryPositionChangedEventArgs class using
            the specified new position.
            </summary>
            <param name="position">The new position of the device.</param>
        </member>
        <member name="T:PiUsbNet.ZRotary">
             <summary>
             Provides an interface to a ZRotary device.
             </summary>
             <remarks>
             <para>
             ZRotary is a composite class.
             It uses a <see cref="T:PiUsbNet.Twister"/> device to move a rotary stage, but provides
             additional functionality:
             <list type="bullet">
             <item> You can convert motor steps to other units, typically degrees.</item>
             <item>The multi-step Home procedure is handled automatically.</item>
             </list>
             </para>
            
             <h3>Absolute position sensor</h3>
            
             <para>
             The ZRotary device uses a <see cref="T:PiUsbNet.Twister"/> device with an integrated
             absolute position sensor.
             The sensor is a rotary potentiometer which is read by an A/D converter.
             It reports the position of the twister motor shaft as a 10-bit value
             (0 to 1023) in A/D "counts".
             We convert this to degrees using the <see cref="P:PiUsbNet.ZRotary.SensorCountSize"/> property.
             </para>
             <para>
             The sensor does not have as much resolution as motor steps, but it provides an
             absolute position rather than relative to the power-on or user set zero position.
             This absolute position can be used to establish a home or zero position, and
             provide motion limits.
             </para>
            
             <h3>Motion limits</h3>
            
             <para>
             During operation the system will use the sensor position to
             enforce motion limits.
             </para>
             <para>
             For proper operation you must set the lower and upper limit locations using either the
             <see cref="M:PiUsbNet.ZRotary.LoadSettingsFromRegistry(System.String)">LoadSettingsFromRegistry</see> method or the
             <see cref="P:PiUsbNet.ZRotary.SensorLowerLimitCounts"/>  and <see cref="P:PiUsbNet.ZRotary.SensorUpperLimitCounts"/>
             properties.
             </para>
            
             <h3>Home procedure</h3>
            
             <para>
             During the home procedure the system will use the sensor position to
             establish the home position.
             </para>
             <para>
             For proper operation, you must set the home location using either the
             <see cref="M:PiUsbNet.ZRotary.LoadSettingsFromRegistry(System.String)">LoadSettingsFromRegistry</see> method or the
             <see cref="P:PiUsbNet.ZRotary.SensorHomeCounts"/> property.
             </para>
             </remarks>
        </member>
        <member name="E:PiUsbNet.ZRotary.PositionChanged">
            <summary>
            Occurs when the position or sensorPosition of the device has changed.
            </summary>
        </member>
        <member name="E:PiUsbNet.ZRotary.StatusChanged">
            <summary>
            Occurs when the status of the device has changed.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotary.OnPositionChanged(PiUsbNet.ZRotaryPositionChangedEventArgs)">
            <summary>
            Raises the ZRotaryChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new position.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.OnStatusChanged(PiUsbNet.ZRotaryStatusChangedEventArgs)">
            <summary>
            Raises the StatusChanged event.
            </summary>
            <param name="e">An EventArgs that contains the new status.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.#ctor">
            <summary>
            Initializes a new instance of the ZRotary class with a serial number of zero.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ZRotary class with the specified serial number,
            and attempts to connect to it.
            </summary>
            <param name="serialNumber">The serial number of the device.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.Close">
            <summary>
            Closes the device
            </summary>
            <remarks>
            <para>
            If the device is connected when the Close method is called, it will disconnect
            the device and raise the Disconnected event.
            </para>
            <para>
            Close does not stop an ongoing move operation. The move will continue to its destination.
            </para>
            </remarks>
            <returns>True if a device was connected.</returns>
        </member>
        <member name="M:PiUsbNet.ZRotary.Connect">
            <summary>
            Attempts to connect to the ZRotary device
            </summary>
            <returns>True if the device is successfully connected.</returns>
            <remarks>
            <para>You must lock the device before calling this method.
            </para>
            <para>
            If this method succeeds and returns true, you should raise
            the Connected event.
            </para>
            <para>
            If a device is already connected, will throw an exception.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.Velocity">
            <summary>
            Gets or sets the velocity.
            </summary>
            <remarks>
            <para>
            The velocity is an integer between 1 and 13, where 1 is the
            slowest speed and 13 is the fastest speed.
            </para>
            <para>We recommend that you limit your velocity to be 10 or less.
            These velocities should work well with most devices you connect to the
            ZRotary.
            If your load is small and light, you may be able to use faster velocities
            (between 11 and 13). If you attempt to move too large a load at too high a speed,
            the motor may stall, or may miss steps and not move the full distance.
            </para>
            <para>The following table shows the velocity settings and the approximate
            speed they correspond to.
            </para>
            <list type="table">
              <listheader>
                <term>Velocity</term>
                <description>Steps/Second</description>
                <description>Degrees/Second</description>
                <description>RPM</description>
              </listheader>
              <item>
                <term>1</term>
                <description>133</description>
                <description>240</description>
                <description>40</description>
              </item>
              <item>
                <term>2</term>
                <description>143</description>
                <description>240</description>
                <description>40</description>
              </item>
              <item>
                <term>3</term>
                <description>154</description>
                <description>277</description>
                <description>46</description>
              </item>
              <item>
                <term>4</term>
                <description>167</description>
                <description>300</description>
                <description>50</description>
              </item>
              <item>
                <term>5</term>
                <description>182</description>
                <description>328</description>
                <description>55</description>
              </item>
              <item>
                <term>6</term>
                <description>200</description>
                <description>360</description>
                <description>60</description>
              </item>
              <item>
                <term>7</term>
                <description>222</description>
                <description>400</description>
                <description>67</description>
              </item>
              <item>
                <term>8</term>
                <description>250</description>
                <description>450</description>
                <description>75</description>
              </item>
              <item>
                <term>9</term>
                <description>286</description>
                <description>514</description>
                <description>86</description>
              </item>
              <item>
                <term>10</term>
                <description>333</description>
                <description>600</description>
                <description>100</description>
              </item>
              <item>
                <term>11</term>
                <description>400</description>
                <description>720</description>
                <description>120</description>
              </item>
              <item>
                <term>12</term>
                <description>500</description>
                <description>900</description>
                <description>150</description>
              </item>
              <item>
                <term>13</term>
                <description>667</description>
                <description>1200</description>
                <description>200</description>
              </item>
            </list>
            <para>
            The velocity is fixed for the duration of a move.
            If you change the velocity while the ZRotary is moving,
            the change will apply to the next move.
            </para>
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.MotorStepSize">
            <summary>
            Gets or sets the distance, in degrees, that the motor shaft is moved for a
            single step of the motor.
            </summary>
            <remarks>
            The default value is 0. 04488 degrees.
            Do not change this value unless you are using non-standard hardware.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.SensorCountSize">
            <summary>
            Gets or sets the distance, in degrees, that the motor shaft is moved for a
            single count of the sensor.
            </summary>
            <remarks>
            The default value is 0. 001122 degrees.
            Do not change this value unless you are using non-standard hardware.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.MinSteps">
            <summary>
            Gets or sets the minimum step number that the motor can
            safely move to.
            </summary>
            <remarks>
            The default value is -32767.
            Do not change this value unless you are using non-standard hardware.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.MaxSteps">
            <summary>
            Gets or sets the maximum step number that the motor can
            safely move to.
            </summary>
            <remarks>
            The default value is +32767.
            Do not change this value unless you are using non-standard hardware.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.SensorLowerLimitCounts">
            <summary>
            Gets or sets the minimum sensor position, in counts, that the motor can
            safely move to.
            </summary>
            <remarks>
            The default value is 150.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.SensorHomeCounts">
            <summary>
            Gets or sets the sensor position, in counts, that corresponds to the home position.
            </summary>
            <remarks>
            The default value is 502.
            </remarks>
        </member>
        <member name="P:PiUsbNet.ZRotary.SensorUpperLimitCounts">
            <summary>
            Gets or sets the maximum sensor position, in counts, that the motor can
            safely move to.
            </summary>
            <remarks>
            The default value is 830.
            </remarks>
        </member>
        <member name="M:PiUsbNet.ZRotary.Halt">
            <summary>
            Stops all motion.
            </summary>
            <remarks>
            Halt will stop any Move or Home operation.
            </remarks>
        </member>
        <member name="M:PiUsbNet.ZRotary.Home">
             <summary>
             Initiates the home procedure on the ZRotary.
             </summary>
             <remarks>
             <para>
             The ZRotary uses a multi-step home procedure to ensure a reliable home position.
             </para>
             <para>
             Call this method to initiate the home procedure.
             Homing is initiated and the method returns without waiting for homing to complete.
             </para>
            
             <para>
             You can check whether the device has finished homing with the
             <see cref="P:PiUsbNet.ZRotary.IsHoming"/> property or the
             <see cref="M:PiUsbNet.ZRotary.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">GetStatus</see> or
             <see cref="M:PiUsbNet.ZRotary.GetStatusAll(System.Double@,System.Double@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">GetStatusAll</see>
             methods.
             </para>
             </remarks>
        </member>
        <member name="M:PiUsbNet.ZRotary.MoveTo(System.Double)">
            <summary>
            Starts moving to a destination position.
            </summary>
            <remarks>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </remarks>
            <param name="destination">The destination position of the move, in degrees.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.MoveToSteps(System.Int32)">
            <summary>
            Starts moving to a destination step position.
            </summary>
            <remarks>
            <para>
            This method does not wait for the move to complete.
            The move is initiated, and the method returns.
            </para>
            <para>
            This method is normally used only for diagnostics and testing purposes.
            Use the <see cref="M:PiUsbNet.ZRotary.MoveTo(System.Double)">MoveTo</see>
            method for normal operation.
            </para>
            </remarks>
            <param name="destinationSteps">The destination position of the move, in motor steps.
            </param>
        </member>
        <member name="M:PiUsbNet.ZRotary.IsValidPosition(System.Double)">
            <summary>
            Gets a value indicating whether the specified position can be
            reached by the ZRotary device.
            </summary>
            <param name="position">The target position, in degrees.</param>
            <returns>Whether the specified position can be reached by the ZRotary.</returns>
        </member>
        <member name="M:PiUsbNet.ZRotary.IsValidPositionSteps(System.Int32)">
            <summary>
            Gets a value indicating whether the specified position can be
            reached by the ZRotary device.
            </summary>
            <remarks>
            <para>
            A value can be reached if it is between the
            <see cref="P:PiUsbNet.ZRotary.MinSteps"/> and <see cref="P:PiUsbNet.ZRotary.MaxSteps"/> values.
            </para>
            <para>
            This method is normally used only for diagnostics and testing purposes.
            Use the <see cref="M:PiUsbNet.ZRotary.IsValidPosition(System.Double)">IsValidPosition()</see>
            method for normal operation.
            </para>
            </remarks>
            <param name="positionSteps">The target position, in motor steps.
            </param>
            <returns>Whether the specified position can be reached by the ZRotary.</returns>
        </member>
        <member name="P:PiUsbNet.ZRotary.Position">
            <summary>
            Gets the position of the ZRotary, in degrees.
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotary.IsHoming">
            <summary>
            Gets a value indicating whether the ZRotary is performing the home procedure.
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotary.IsMoving">
            <summary>
            Gets a value indicating whether the ZRotary is moving.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotary.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the device status in a single method call.
            </summary>
            <remarks>
            <para>
            This method returns the value of the
            <see cref="P:PiUsbNet.ZRotary.Position"/>,
            <see cref="P:PiUsbNet.ZRotary.IsMoving"/>, and
            <see cref="P:PiUsbNet.ZRotary.IsHoming"/> properties.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position, in degrees.</param>
            <param name="isMoving">A value indicating whether the ZRotary is moving.</param>
            <param name="isHoming">A value indicating whether the ZRotary is homing.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.GetStatusAll(System.Double@,System.Double@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets all device status in a single method call.
            </summary>
            <remarks>
            <para>
            This method is similar to the
            <see cref="M:PiUsbNet.ZRotary.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">GetStatus()</see>
            method, but also returns the
            motor position in motor steps and sensor position in sensor counts.
            </para>
            <para>
            This method is normally used only for diagnostics and testing.
            Use the
            <see cref="M:PiUsbNet.ZRotary.GetPositionAndStatus(System.Double@,System.Boolean@,System.Boolean@)">GetStatus</see>
            method for normal operation.
            </para>
            <para>
            It is more efficient to call this method rather than calling the
            properties individually.
            Using this method reduces I/O traffic to the device and can
            improve the responsiveness of your application.
            </para>
            </remarks>
            <param name="position">The current position in degrees.</param>
            <param name="sensorPosition">The current sensor position in degrees.</param>
            <param name="positionSteps">The current position in steps.</param>
            <param name="sensorPositionCounts">The current sensor position in sensor counts.</param>
            <param name="isMoving">A value indicating whether the ZRotary is moving.</param>
            <param name="isHoming">A value indicating whether the ZRotary is homing.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.LoadSettingsFromRegistry(System.String)">
             <summary>
             Loads properties from a registry key.
             </summary>
             <remarks>
             <para>
             This method allows easy configuration of the object, and provides
             consistent operation across applications.
             </para>
            
             <para>
             You must connect to the device before calling this method.
             If you Disconnect and re-Connect to the device, you should call this
             method again.
             </para>
             <para>
             The properties set by this method are:
             </para>
                 <list type="bullet">
                 <item><see cref="P:PiUsbNet.ZRotary.MinSteps"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.MaxSteps"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.MotorStepSize"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorCountSize"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorHomeCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorLowerLimitCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorUpperLimitCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.Velocity"/></item>
                 </list>
             <para>
             The <see cref="P:PiUsbNet.UsbDevice.SerialNumber"/> property is not affected by this method,
             since you must connect to the device before loading the settings.
             </para>
             </remarks>
             <param name="keyName">The registry keyName to be used.
             This is not a full path to the key, but is relative to HKCU\Software\Picard Industries\
             The standard keyName used by the USB 4D-Labjack software is USB 4D-LabJack\ZRotary.</param>
        </member>
        <member name="M:PiUsbNet.ZRotary.SaveSettingsToRegistry(System.String)">
             <summary>
             Saves properties to a registry key.
             </summary>
             <remarks>
             <para>
             This method allows easy configuration of the object, and provides
             consistent operation across applications.
             </para>
            
             <para>
             You must connect to the device before calling this method.
             </para>
             <para>
             The properties saved by this method are:
             </para>
                 <list type="bullet">
                 <item><see cref="P:PiUsbNet.ZRotary.MinSteps"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.MaxSteps"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.MotorStepSize"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorCountSize"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorHomeCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorLowerLimitCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.SensorUpperLimitCounts"/></item>
                 <item><see cref="P:PiUsbNet.ZRotary.Velocity"/></item>
                 </list>
             <para>
             The <see cref="P:PiUsbNet.UsbDevice.SerialNumber"/> property is not
             saved by this method, since you must connect
             to the device before loading or saving the settings.
             </para>
             </remarks>
             <param name="keyName">The registry keyName to be used.
             This is not a full path to the key, but is relative to HKCU\Software\Picard Industries\
             The standard keyName used by the USB 4D-Labjack software is USB 4D-LabJack\ZRotary.</param>
        </member>
        <member name="P:PiUsbNet.ZRotary.PreviousPosition">
            <summary>
            Gets or sets the position from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotary.PreviousIsMoving">
            <summary>
            Gets or sets the IsMoving status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="P:PiUsbNet.ZRotary.PreviousIsHoming">
            <summary>
            Gets or sets the IsHoming status from the previous execution of the polling thread.
            </summary>
        </member>
        <member name="M:PiUsbNet.ZRotary.PollDevice">
            <summary>
            Reads data from the device and raises events as required
            </summary>
        </member>
        <member name="T:PiUsbNet.ErrorNumber">
            <summary>
            The error number for an exception
            </summary>
            <seealso cref="T:PiUsbNet.UsbDeviceException"/>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.NoError">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.DeviceNotFound">
            <summary>
            Device not found
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.ObjectNotFound">
            <summary>
            Unmanaged object not found (null device pointer).
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.CannotCreateObject">
            <summary>
            Cannot create the unmanaged object
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.InvalidDeviceHandle">
            <summary>
            The underlying file handle for the device is invalid or not open.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.ReadTimeout">
            <summary>
            Timeout reading from the device.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.ReadThreadAbandoned">
            <summary>
            Thread error reading from device.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.ReadFailed">
            <summary>
            Error reading from device.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.InvalidParameter">
            <summary>
            Invalid function parameter.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.WriteFailed">
            <summary>
            Error writing to device.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.WrongDeviceType">
            <summary>
            Wrong device type for the method called.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.InvalidRegistryKey">
            <summary>
            Invalid registry key for loading or saving settings.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.HomeSearchTimeout">
            <summary>
            Timeout searching for home.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.MoveBeyondLimit">
            <summary>
            Attempt to move beyond limit.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.SolveFailed">
            <summary>
            Could not calculate position (4DLabJack).
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.InvalidWhileHoming">
            <summary>
            Cannot call method while homing.
            </summary>
        </member>
        <member name="F:PiUsbNet.ErrorNumber.NotAllLegsConnected">
            <summary>
            Invalid, not all legs are connected.
            </summary>
        </member>
        <member name="T:PiUsbNet.UsbDeviceException">
            <summary>
            Represents errors that occur while using the UsbDevices class.
            </summary>
            <seealso cref="T:PiUsbNet.ErrorNumber"/>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor">
            <summary>
             Initializes a new instance of the UsbDeviceException class with default parameters.
            </summary>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UsbDeviceException class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UsbDeviceException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null
            reference if no inner exception is specified. </param>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor(PiUsbNet.ErrorNumber)">
            <summary>
            Initializes a new instance of the UsbDeviceException class with the message
            for the specified PiUsb.dll (or PiUsb4DLabjack.dll) error number.
            </summary>
            <param name="errorNumber">The PiUsb.dll error number for the error.</param>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor(PiUsbNet.ErrorNumber,System.String)">
            <summary>
            Initializes a new instance of the UsbDeviceException class with the message
            for the specified PiUsb.dll (or PiUsb4DLabjack.dll) error number
            plus the contents of an additional detail message.
            </summary>
            <param name="errorNumber">The PiUsb.dll error number for the error.</param>
            <param name="detail">A message providing additional details about the error.</param>
        </member>
        <member name="M:PiUsbNet.UsbDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Initializes a new instance of the UsbDeviceException class with serialized data.
            This constructor is needed for serialization when an
            exception propagates from a remoting server to the client.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
    </members>
</doc>
